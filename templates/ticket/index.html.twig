{% extends 'base.html.twig' %}

{% macro sortable_header(label, field, sortState) %}
    {% set currentOrder = sortState.currentSort == field ? sortState.currentOrder : 'none' %}
    {% set newOrder = currentOrder == 'ASC' ? 'DESC' : 'ASC' %}

    {% set sortIcon = '' %}
    {% if sortState.currentSort == field %}
        {% if currentOrder == 'ASC' %}
            {% set sortIcon = '<i class="bi bi-sort-down ms-1"></i>' %}
        {% else %}
            {% set sortIcon = '<i class="bi bi-sort-up ms-1"></i>' %}
        {% endif %}
    {% else %}
        {% set sortIcon = '<i class="bi bi-arrow-down-up text-muted ms-1" style="opacity: 0.5;"></i>' %}
    {% endif %}

    <a href="{{ path(app.request.attributes.get('_route'), app.request.query.all()|merge({
        'sort_by': field,
        'sort_order': newOrder
    })) }}" class="text-decoration-none text-dark">
        {{ label|raw }} {{ sortIcon|raw }}
    </a>
{% endmacro %}

{% block title %}Lista de Tickets{% endblock %}

{% block body %}
<div class="container-fluid mt-4">
    <!-- Dashboard Stats -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-primary bg-opacity-10 rounded-circle p-3">
                                <i class="bi bi-ticket-detailed text-primary fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title text-muted mb-1">Total Tickets</h6>
                            <h3 class="mb-0 fw-bold text-primary">{{ totalItems }}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-warning bg-opacity-10 rounded-circle p-3">
                                <i class="bi bi-clock text-warning fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title text-muted mb-1">Pendientes</h6>
                            <h3 class="mb-0 fw-bold text-warning">{{ tickets|filter(t => t.estado == 'pendiente')|length }}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-info bg-opacity-10 rounded-circle p-3">
                                <i class="bi bi-arrow-repeat text-info fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title text-muted mb-1">En Proceso</h6>
                            <h3 class="mb-0 fw-bold text-info">{{ tickets|filter(t => t.estado == 'en proceso')|length }}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-0 shadow-sm h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <div class="bg-success bg-opacity-10 rounded-circle p-3">
                                <i class="bi bi-check-circle text-success fs-4"></i>
                            </div>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title text-muted mb-1">Completados</h6>
                            <h3 class="mb-0 fw-bold text-success">{{ tickets|filter(t => t.estado == 'terminado')|length }}</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Header with Actions -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-1">
                üé´ {% if is_granted('ROLE_ADMIN') %}Todos los Tickets{% else %}Mis Tickets{% endif %}
            </h1>
            <p class="text-muted mb-0">Gestiona y organiza todos los tickets del sistema</p>
        </div>
        <div class="d-flex gap-2">
            <a href="{{ path('ticket_nuevo') }}" class="btn btn-primary">
                <i class="bi bi-plus-lg me-1"></i> Nuevo Ticket
            </a>
            <button class="btn btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#filtrosPanel" aria-expanded="false" aria-controls="filtrosPanel">
                <i class="bi bi-funnel me-1"></i> Filtros
            </button>
            <button onclick="window.location.reload()" class="btn btn-outline-secondary" title="Recargar (Ctrl+R)">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <!-- Advanced Filters Panel -->
    <div class="collapse mb-4" id="filtrosPanel">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-light border-0">
                <h6 class="mb-0"><i class="bi bi-funnel me-2"></i>Filtros Avanzados</h6>
            </div>
            <div class="card-body">
                {{ form_start(filter_form, {
                    'attr': {
                        'class': 'row g-3',
                        'id': 'ticket-filter-form',
                        'data-turbo': 'false'
                    },
                    'method': 'GET'
                }) }}
                    <div class="col-md-4">
                        <label class="form-label small text-muted mb-1">B√∫squeda</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            {{ form_widget(filter_form.search, {'attr': {
                                'class': 'form-control',
                                'placeholder': 'Buscar por ID, pedido o descripci√≥n...',
                                'id': 'searchInput'
                            }}) }}
                        </div>
                    </div>

                    <div class="col-md-3">
                        <label class="form-label small text-muted mb-1">Estado</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-tag"></i></span>
                            {{ form_widget(filter_form.estado, {'attr': {
                                'class': 'form-select',
                                'data-control': 'select2'
                            }}) }}
                        </div>
                    </div>

                    <div class="col-md-3">
                        <label class="form-label small text-muted mb-1">√Årea</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-building"></i></span>
                            {{ form_widget(filter_form.departamento, {'attr': {
                                'class': 'form-select',
                                'data-control': 'select2'
                            }}) }}
                        </div>
                    </div>

                    <div class="col-md-5">
                        <label class="form-label small text-muted mb-1">Rango de fechas</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                            {{ form_widget(filter_form.fechaDesde, {'attr': {
                                'class': 'form-control',
                                'placeholder': 'Desde',
                                'autocomplete': 'off'
                            }}) }}
                            <span class="input-group-text">hasta</span>
                            {{ form_widget(filter_form.fechaHasta, {'attr': {
                                'class': 'form-control',
                                'placeholder': 'Hasta',
                                'autocomplete': 'off'
                            }}) }}
                        </div>
                    </div>

                    <div class="col-md-1 d-flex align-items-end">
                        <button type="submit" name="{{ filter_form.buscar.vars.full_name }}" class="btn btn-primary w-100">
                            <i class="bi bi-search me-1"></i> Buscar
                        </button>
                    </div>

                    <div class="col-md-1 d-flex align-items-end">
                        <button type="submit" name="{{ filter_form.limpiar.vars.full_name }}" class="btn btn-outline-secondary w-100">
                            <i class="bi bi-x-lg me-1"></i> Limpiar
                        </button>
                    </div>
                {{ form_end(filter_form) }}
            </div>
        </div>
    </div>

    <!-- Table View -->
    <div id="tableView" class="view-content">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-light border-0 d-flex justify-content-between align-items-center">
                <div>
                    <span class="text-muted small" id="ticket-count">
                        {% if tickets is not empty %}
                            Mostrando {{ tickets|length }} de {{ totalItems }} tickets
                        {% else %}
                            No se encontraron tickets
                        {% endif %}
                    </span>
                </div>
            </div>
            <div id="ticket-table-container">
                <!-- The ticket table will be loaded here via AJAX -->
                {% include 'ticket/_ticket_table.html.twig' %}
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Debounce function to limit how often a function can be called
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Function to update the URL with current filters
    function updateUrl() {
        const url = new URL(window.location.href);
        const formData = new FormData(document.getElementById('ticket-filter-form'));
        
        // Clear existing params
        const params = new URLSearchParams();
        
        // Add form data to params
        formData.forEach((value, key) => {
            if (value && value !== '') {
                params.set(key, value);
            }
        });
        
        // Update URL without page reload
        window.history.pushState({}, '', `${url.pathname}?${params.toString()}`);
    }

    // Function to load tickets via AJAX
    function loadTickets() {
        const formData = new FormData(document.getElementById('ticket-filter-form'));
        const url = new URL(window.location.href);
        
        // Add form data to URL params
        formData.forEach((value, key) => {
            if (value && value !== '') {
                url.searchParams.set(key, value);
            } else {
                url.searchParams.delete(key);
            }
        });
        
        // Show loading state
        const container = document.getElementById('ticket-table-container');
        container.innerHTML = '<div class="text-center p-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div></div>';
        
        // Make AJAX request
        fetch(url.toString(), {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.text())
        .then(html => {
            container.innerHTML = html;
            // Re-initialize tooltips
            const tooltipTriggerList = [].slice.call(container.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(tooltipTriggerEl => {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
            
            // Update ticket count
            const ticketCount = container.querySelectorAll('tbody tr').length;
            const totalItems = {{ totalItems }};
            document.getElementById('ticket-count').textContent = 
                ticketCount > 0 
                    ? `Mostrando ${ticketCount} de ${totalItems} tickets`
                    : 'No se encontraron tickets';
        })
        .catch(error => {
            console.error('Error:', error);
            container.innerHTML = '<div class="alert alert-danger m-3">Error al cargar los tickets. Por favor, intente de nuevo.</div>';
        });
    }
    
    // Add event listeners for filter changes
    const filterForm = document.getElementById('ticket-filter-form');
    if (filterForm) {
        // Handle input events with debounce
        const searchInputs = filterForm.querySelectorAll('input[type="text"], input[type="date"], input[type="search"]');
        searchInputs.forEach(input => {
            input.addEventListener('input', debounce(loadTickets, 300));
        });
        
        // Handle select changes
        const selectInputs = filterForm.querySelectorAll('select');
        selectInputs.forEach(select => {
            select.addEventListener('change', loadTickets);
        });
        
        // Handle form submission
        filterForm.addEventListener('submit', function(e) {
            e.preventDefault();
            loadTickets();
        });
    }
    
    // Handle pagination clicks
    document.addEventListener('click', function(e) {
        const pageLink = e.target.closest('.page-link');
        if (pageLink && !pageLink.closest('.disabled')) {
            e.preventDefault();
            const page = pageLink.dataset.page;
            if (page) {
                const url = new URL(window.location.href);
                url.searchParams.set('page', page);
                window.location.href = url.toString();
            }
        }
    });
    
    // Handle sort links
    document.addEventListener('click', function(e) {
        const sortLink = e.target.closest('.sort-link');
        if (sortLink) {
            e.preventDefault();
            const field = sortLink.dataset.sort;
            const order = sortLink.dataset.order;
            
            const url = new URL(window.location.href);
            url.searchParams.set('sort_by', field);
            url.searchParams.set('sort_order', order);
            
            // Reset to first page when changing sort
            url.searchParams.set('page', '1');
            
            window.location.href = url.toString();
        }
    });
    
    // Initialize tooltips
    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Initialize popovers
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl, {
            trigger: 'hover',
            html: true
        });
    });

    // Real-time search
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        let searchTimeout;
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                document.getElementById('filterForm').submit();
            }, 500);
        });
    }

    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + N for new ticket
        if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
            e.preventDefault();
            window.location.href = '{{ path('ticket_nuevo') }}';
        }
        
        // Ctrl/Cmd + F for filters
        if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
            e.preventDefault();
            const filtersPanel = document.getElementById('filtrosPanel');
            const bsCollapse = new bootstrap.Collapse(filtersPanel, { toggle: true });
        }
        
        // Ctrl/Cmd + R for refresh
        if ((e.ctrlKey || e.metaKey) && e.key === 'r') {
            e.preventDefault();
            window.location.reload();
        }
        
        // Escape to close modals
        if (e.key === 'Escape') {
            const modals = document.querySelectorAll('.modal.show');
            modals.forEach(modal => {
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) bsModal.hide();
            });
        }
    });

    // Show filters panel if there are active filters
    const urlParams = new URLSearchParams(window.location.search);
    const hasFilters = Array.from(urlParams.keys()).some(key =>
        key !== 'page' && key !== 'limit' && !key.endsWith('[_token]')
    );

    if (hasFilters) {
        const filtersPanel = new bootstrap.Collapse(document.getElementById('filtrosPanel'), {
            toggle: true
        });
    }

    // Table row hover effects
    const tableRows = document.querySelectorAll('.ticket-row');
    tableRows.forEach(row => {
        row.addEventListener('mouseenter', function() {
            this.style.backgroundColor = '#f8f9fa';
            this.style.transform = 'scale(1.01)';
            this.style.transition = 'all 0.2s ease';
        });
        
        row.addEventListener('mouseleave', function() {
            this.style.backgroundColor = '';
            this.style.transform = 'scale(1)';
        });
    });

    // Card hover effects
    const ticketCards = document.querySelectorAll('.ticket-card');
    ticketCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-5px)';
            this.style.boxShadow = '0 0.5rem 1rem rgba(0, 0, 0, 0.15)';
            this.style.transition = 'all 0.3s ease';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = '0 0.125rem 0.25rem rgba(0, 0, 0, 0.075)';
        });
    });

    // Export function
    function exportTickets() {
        // Implementation for exporting tickets
        alert('Funci√≥n de exportaci√≥n en desarrollo');
    }

    // Quick actions modal functionality removed - no longer used
});
</script>

<style>
/* Enhanced Styles */
.view-content {
    transition: all 0.3s ease;
}

.btn-group .btn.active {
    background-color: #0d6efd;
    color: white;
    border-color: #0d6efd;
}

.ticket-card {
    transition: all 0.3s ease;
    border-radius: 0.75rem;
}

.ticket-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

.avatar-sm {
    width: 32px;
    height: 32px;
    font-size: 0.875rem;
}

.text-truncate-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

.badge {
    font-weight: 500;
    padding: 0.35em 0.65em;
    font-size: 0.75em;
}

.badge-status {
    min-width: 100px;
    font-weight: 500;
}

.badge-pendiente {
    background-color: #ffc107;
    color: #000;
}

.badge-en_progreso {
    background-color: #0d6efd;
    color: #fff;
}

.badge-completado {
    background-color: #198754;
    color: #fff;
}

.badge-cancelado {
    background-color: #dc3545;
    color: #fff;
}

.table th a {
    display: flex;
    align-items: center;
    justify-content: space-between;
    color: #495057;
    text-decoration: none;
    width: 100%;
}

.table th:hover {
    background-color: #e9ecef;
}

.table th.sort-asc i,
.table th.sort-desc i {
    color: #0d6efd;
}

.table td {
    vertical-align: middle;
}

.card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    transition: all 0.3s ease;
}

.card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
}

.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-weight: 500;
}

.form-control, .form-select {
    border-radius: 0.375rem;
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
}

.input-group-text {
    background-color: #f8f9fa;
}

.pagination .page-item.active .page-link {
    background-color: #0d6efd;
    border-color: #0d6efd;
}

.pagination .page-link {
    border-radius: 0.375rem;
    margin: 0 0.125rem;
}

/* Responsive improvements */
@media (max-width: 1200px) {
    .table-responsive {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
}

@media (max-width: 768px) {
    .btn-group {
        flex-direction: column;
    }
    
    .btn-group .btn {
        border-radius: 0.375rem !important;
        margin-bottom: 0.25rem;
    }
}

/* Animation classes */
.fade-in {
    animation: fadeIn 0.5s ease-in;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

.slide-in {
    animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
    from { transform: translateX(-100%); }
    to { transform: translateX(0); }
}

/* Enhanced table styles */
.table-hover tbody tr:hover {
    background-color: rgba(13, 110, 253, 0.05);
    transform: scale(1.01);
    transition: all 0.2s ease;
}

/* Estilos para el estado de los tickets */
.status-badge {
    font-size: 0.75rem;
    font-weight: 500;
    padding: 0.5rem 0.75rem;
    border-radius: 50rem;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    margin-bottom: 0.5rem;
}

.status-badge.bg-warning {
    background-color: #ffc107 !important;
    color: #000 !important;
}

.status-badge.bg-info {
    background-color: #0dcaf0 !important;
    color: #000 !important;
}

.status-badge.bg-success {
    background-color: #198754 !important;
    color: #fff !important;
}

.status-badge.bg-danger {
    background-color: #dc3545 !important;
    color: #fff !important;
}

/* Estilos para el select de estado */
.status-select-container {
    min-width: 120px;
}

.status-select-container .form-select {
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
}

/* Mejoras para la tabla */
.table th {
    background-color: #f8f9fa;
    border-bottom: 2px solid #dee2e6;
    font-weight: 600;
    color: #495057;
}

.table td {
    vertical-align: middle;
    border-bottom: 1px solid #e9ecef;
}

.table tbody tr:hover {
    background-color: rgba(13, 110, 253, 0.05);
}

/* Estilos para los badges de departamento */
.department-badge {
    font-size: 0.75rem;
    padding: 0.5rem 0.75rem;
    border-radius: 50rem;
    background-color: #f8f9fa;
    color: #495057;
    border: 1px solid #dee2e6;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.department-badge i {
    flex-shrink: 0;
}

.avatar-sm {
    width: 32px;
    height: 32px;
    font-size: 0.875rem;
}

.text-truncate-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* Status indicator improvements */
.status-indicator {
    position: relative;
}

.status-indicator::before {
    content: '';
    position: absolute;
    left: -8px;
    top: 50%;
    transform: translateY(-50%);
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: currentColor;
}

/* Loading states */
.loading {
    opacity: 0.6;
    pointer-events: none;
}

.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid #0d6efd;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
</style>
{% endblock %}
