{% extends 'base.html.twig' %}

{% block title %}Ticket #{{ '%04d'|format(ticket.id) }} - {{ ticket.title }}{% endblock %}

{% block body %}
<!-- Success Toast -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="toastSuccess" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <strong class="me-auto">Éxito</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Cerrar"></button>
        </div>
        <div class="toast-body" id="toastMessage">
            Operación completada con éxito
        </div>
    </div>
</div>

<!-- Error Toast -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="toastError" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-danger text-white">
            <strong class="me-auto">Error</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Cerrar"></button>
        </div>
        <div class="toast-body" id="errorMessage">
            Ha ocurrido un error
        </div>
    </div>
</div>

<div class="container py-4">
    <!-- Header with Breadcrumb -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-transparent p-0 mb-3">
                    <li class="breadcrumb-item"><a href="{{ path('ticket_index') }}" class="text-decoration-none"><i class="fas fa-ticket-alt me-1"></i> Tickets</a></li>
                    <li class="breadcrumb-item active" aria-current="page">#{{ '%04d'|format(ticket.id) }}</li>
                </ol>
            </nav>

            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0 d-flex align-items-center">
                    <span class="me-3">{{ ticket.title }}</span>
                    <span class="badge rounded-pill {{ ticket.status == 'in_progress' ? 'bg-primary' : ticket.status|status_class }} fs-6">
                        <i class="fas {{ ticket.status == 'in_progress' ? 'fa-user-check' : ticket.status|status_icon }} me-1"></i>
                        {{ ticket.status == 'in_progress' ? 'En Proceso' : ticket.status|status_label }}
                        {% if ticket.status == 'in_progress' and ticket.takenBy %}
                            <span class="ms-1">({{ ticket.takenBy.getFullName() }})</span>
                        {% endif %}
                    </span>
                </h1>
                <div class="btn-group">
                    <a href="{{ path('ticket_index') }}" class="btn btn-outline-secondary btn-sm">
                        <i class="fas fa-arrow-left me-1"></i> Volver
                    </a>
                    {% if is_granted('edit', ticket) %}
                        <a href="{{ path('ticket_edit', {'id': ticket.id}) }}" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-edit me-1"></i> Editar
                        </a>
                    {% endif %}

                    {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_AUDITOR') %}
                        {% if ticket.status != 'rejected' and ticket.status != 'completed' %}
                            {% if ticket.ticketAssignments|length > 0 %}
                                <button type="button" class="btn btn-success btn-sm ms-1" disabled>
                                    <i class="fas fa-check-circle me-1"></i> Asignado
                                </button>
                            {% else %}
                                <button type="button" class="btn btn-primary btn-sm ms-1" data-bs-toggle="modal" data-bs-target="#assignTicketModal">
                                    <i class="fas fa-user-plus me-1"></i> Asignar Ticket
                                </button>
                            {% endif %}

                            <button type="button" class="btn btn-outline-danger btn-sm ms-1" data-bs-toggle="modal" data-bs-target="#rejectTicketModal">
                                <i class="fas fa-times me-1"></i> Rechazar
                            </button>

                            <button type="button" class="btn btn-outline-success btn-sm ms-1" data-bs-toggle="modal" data-bs-target="#completeTicketModal">
                                <i class="fas fa-check me-1"></i> Completar
                            </button>
                            
                            <button type="button" class="btn btn-outline-primary btn-sm ms-1" data-bs-toggle="modal" data-bs-target="#scheduleTicketModal">
                                <i class="far fa-calendar-alt me-1"></i> Agendar
                            </button>
                            
                            {# Assignment status indicator #}
                            {% if ticket.status == 'in_progress' and isAssigned %}
                                <button type="button" class="btn btn-primary btn-sm ms-1" disabled>
                                    <i class="fas fa-user-check me-1"></i> En Proceso
                                </button>
                            {% endif %}
                        {% endif %}
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Main Content -->
        <div class="col-lg-8">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3">
                    <h5 class="mb-0"><i class="fas fa-info-circle text-primary me-2"></i>Detalles del Ticket</h5>
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <h6 class="text-muted text-uppercase small mb-3">Observaciones</h6>
                        <div class="p-3 bg-light rounded-3">
                            {{ ticket.description|nl2br }}
                        </div>
                    </div>

                    {% if ticket.observation %}
                    <div class="mb-4">
                        <h6 class="text-muted text-uppercase small mb-3">Observaciones</h6>
                        <div class="p-3 bg-light rounded-3">
                            {{ ticket.observation|nl2br }}
                        </div>
                    </div>
                    {% endif %}
                </div>
            </div>

            <!-- Notes Section -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3">
                    <h5 class="mb-0"><i class="fas fa-comments text-primary me-2"></i>Notas</h5>
                </div>
                <div class="card-body p-0" id="notes-container">
                    {% if notes|length > 0 %}
                        <div class="list-group list-group-flush">
                            {% for note in notes %}
                            <div class="list-group-item border-0 py-3">
                                <div class="d-flex">
                                    <div class="flex-shrink-0 me-3">
                                        <div class="bg-light rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                            <i class="fas fa-user text-muted"></i>
                                        </div>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <div>
                                                <strong>{{ note.createdBy.username }}</strong>
                                                <small class="text-muted ms-2">{{ note.createdAt|date('d/m/Y H:i') }}</small>
                                            </div>
                                            {% if is_granted('ROLE_ADMIN') or note.createdBy.id == app.user.id %}
                                            <div>
                                                <a href="#" class="text-muted delete-note" data-note-id="{{ note.id }}" title="Eliminar nota">
                                                    <i class="fas fa-trash-alt"></i>
                                                </a>
                                            </div>
                                            {% endif %}
                                        </div>
                                        <div class="note-content">
                                            {{ note.content|nl2br }}
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {% endfor %}
                        </div>
                    {% else %}
                        <div class="text-center py-4 text-muted">
                            <i class="fas fa-comment-slash fa-2x mb-2"></i>
                            <p class="mb-0">No hay notas para este ticket</p>
                        </div>
                    {% endif %}
                </div>

                <!-- Add Note Form -->
                {% if is_granted('ROLE_USER') and ticket.status not in ['completed', 'rejected'] %}
                <div class="card-footer bg-white">
                    <form id="add-note-form" class="mb-0">
                        <div class="input-group">
                            <textarea class="form-control" id="note-content" name="content" rows="2" placeholder="Agregar una nota..." required></textarea>
                            <button class="btn btn-primary" type="submit">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </form>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Ticket Info -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-white py-3">
                    <h6 class="mb-0"><i class="fas fa-info text-primary me-2"></i>Información del Ticket</h6>
                </div>
                <div class="card-body">
                    <!-- ID interno/externo -->
                    <div class="mb-3">
                        <small class="text-muted text-uppercase">ID Interno / Externo</small>
                        <div class="fw-bold">
                            <div>#{{ '%04d'|format(ticket.id) }}
                                {% if ticket.idSistemaInterno %}
                                    <span class="badge bg-secondary ms-2">{{ ticket.idSistemaInterno }}</span>
                                {% endif %}
                            </div>
                            {% if ticket.area_origen is not empty %}
                                <div class="mt-1">
                                    <small class="text-muted">Área de origen:</small>
                                    <span class="ms-1">{{ ticket.area_origen }}</span>
                                </div>
                            {% endif %}
                        </div>
                    </div>

                    <!-- Fecha de creación -->
                    <div class="mb-3">
                        <small class="text-muted text-uppercase">Fecha de creación</small>
                        <div class="fw-bold">
                            {{ ticket.createdAt|date('d/m/Y H:i') }}
                        </div>
                        <small class="text-muted">por {{ ticket.createdBy.apellido ?? '' }} {{ ticket.createdBy.nombre ?? ticket.createdBy.username }}</small>
                    </div>

                    <!-- Asignados -->
                    <div class="mb-3">
                        <small class="text-muted text-uppercase">Asignados</small>
                        {% if ticket.ticketAssignments|length > 0 %}
                            <div class="fw-bold">
                                {% for assignment in ticket.ticketAssignments %}
                                    <div class="d-flex align-items-center mb-1">
                                        <i class="fas fa-user-circle me-2 text-muted"></i>
                                        {{ assignment.user.apellido }} {{ assignment.user.nombre }}
                                    </div>
                                {% endfor %}
                            </div>
                        {% else %}
                            <div class="text-muted">Sin asignar</div>
                        {% endif %}
                    </div>

                    <!-- Estado actual -->
                    <div class="mb-3">
                        <small class="text-muted text-uppercase">Estado actual</small>
                        <div>
                            <span class="badge text-black bg-{
                                ticket.status == 'in_progress' ? 'warning' :
                                (ticket.status == 'pending' ? 'info' :
                                (ticket.status == 'rejected' ? 'danger' :
                                (ticket.status == 'completed' ? 'success' : 'secondary')))
                            } p-2">
                                <span class="fw-bold">
                                {{ {
                                    'in_progress': 'EN PROGRESO',
                                    'pending': 'PENDIENTE',
                                    'rejected': 'RECHAZADO',
                                    'completed': 'COMPLETADO'
                                }[ticket.status] }}
                                </span>
                            </span>
                        </div>
                    </div>

                    <!-- Última actualización -->
                    <div class="mb-3">
                        <small class="text-muted text-uppercase">Última actualización</small>
                        <div class="fw-bold">
                            {{ ticket.updatedAt|date('d/m/Y H:i') }}
                        </div>
                        {% if ticket.updatedBy is defined and ticket.updatedBy is not null %}
                            {% set updatedBy = ticket.updatedBy %}
                            <small class="text-muted">
                                por {{ updatedBy.apellido is defined ? updatedBy.apellido : '' }}
                                {{ updatedBy.nombre is defined ? updatedBy.nombre : (updatedBy.username is defined ? updatedBy.username : '') }}
                            </small>
                        {% endif %}
                    </div>

                    <!-- Tiempo de resolución (si está completado) -->
                    {% if ticket.status == 'completed' and ticket.updatedAt %}
                        <div class="mb-3">
                            <small class="text-muted text-uppercase">Tiempo de resolución</small>
                            <div class="fw-bold">
                                {% set diff = date(ticket.updatedAt).diff(date(ticket.createdAt)) %}
                                {% if diff.d > 0 %}{{ diff.d }}d {% endif %}
                                {% if diff.h > 0 %}{{ diff.h }}h {% endif %}
                                {{ diff.i }}m
                            </div>
                            <small class="text-muted">Completado el {{ ticket.updatedAt|date('d/m/Y H:i') }}</small>
                        </div>
                    {% endif %}

                </div>
            </div>

            <!-- Assigned Users -->
            {% if not is_granted('ROLE_USER') or is_granted('ROLE_ADMIN') or is_granted('ROLE_AUDITOR') %}
                {# Create an array to store unique user assignments with their latest date #}
                {% set uniqueAssignments = {} %}

                {# First, sort all assignments by assignedAt date (newest first) #}
                {% set sortedAssignments = ticket.ticketAssignments|sort((a, b) => b.assignedAt <=> a.assignedAt) %}

                {# Then add to uniqueAssignments, which will automatically keep only the first (newest) entry for each user #}
                {% for assignment in sortedAssignments %}
                    {% if assignment.user.id not in uniqueAssignments|keys %}
                        {% set uniqueAssignments = uniqueAssignments|merge({ (assignment.user.id) : assignment }) %}
                    {% endif %}
                {% endfor %}

            {% endif %}

            <!-- Ticket History -->
            {% if ticket.updates|length > 0 %}
            <div class="card shadow-sm">
                <div class="card-header bg-white py-3">
                    <h6 class="mb-0"><i class="fas fa-history text-primary me-2"></i>Historial</h6>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        {% for update in ticket.updates|slice(0, 5) %}
                        <div class="list-group-item border-0 py-2">
                            <div class="d-flex align-items-center">
                                <div class="bg-light rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 24px; height: 24px;">
                                    <i class="fas fa-{{ update.type == 'status_change' ? 'exchange-alt' : 'edit' }} text-muted small"></i>
                                </div>
                                <div class="flex-grow-1">
                                    <div class="small">{{ update.description }}</div>
                                    <small class="text-muted">{{ update.createdAt|date('d/m/Y H:i') }}</small>
                                </div>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
            </div>
            {% endif %}
        </div>
    </div>
</div>

<!-- Reject Ticket Modal -->
<div class="modal fade" id="rejectTicketModal" tabindex="-1" aria-labelledby="rejectTicketModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="rejectTicketModalLabel"><i class="fas fa-times-circle me-2"></i>Rechazar Ticket</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <form method="post" action="{{ path('ticket_reject', {'id': ticket.id}) }}">
                <div class="modal-body">
                    <input type="hidden" name="_token" value="{{ csrf_token('reject' ~ ticket.id) }}">
                    <div class="mb-3">
                        <label for="rejectReason" class="form-label fw-bold">Motivo del rechazo</label>
                        <textarea class="form-control" id="rejectReason" name="reason" rows="4" required placeholder="Por favor, describe el motivo del rechazo del ticket..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-danger">Confirmar Rechazo</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Complete Ticket Modal -->
<div class="modal fade" id="completeTicketModal" tabindex="-1" aria-labelledby="completeTicketModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="completeTicketModalLabel"><i class="fas fa-check-circle me-2"></i>Completar Ticket</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <form method="post" action="{{ path('ticket_complete', {'id': ticket.id}) }}">
                <div class="modal-body">
                    <input type="hidden" name="_token" value="{{ csrf_token('complete' ~ ticket.id) }}">
                    <div class="mb-3">
                        <label for="completionNotes" class="form-label fw-bold">Notas de finalización</label>
                        <textarea class="form-control" id="completionNotes" name="notes" rows="4" required placeholder="Por favor, proporciona detalles sobre la resolución del ticket..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-success">Marcar como Completado</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Assign Ticket Modal -->
<div class="modal fade" id="assignTicketModal" tabindex="-1" aria-labelledby="assignTicketModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="assignTicketForm" action="{{ path('ticket_assign', {'id': ticket.id}) }}" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="assignTicketModalLabel">Asignar Ticket</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="userSelectionError" class="alert alert-danger d-none">
                        Por favor selecciona al menos un usuario.
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Seleccionar Usuarios:</label>
                        <select class="form-select" name="assigned_users[]" multiple>
                            {% for user in users %}
                                <option value="{{ user.id }}">{{ user.username }} - {{ user.email }}</option>
                            {% endfor %}
                        </select>
                    </div>

                    <input type="hidden" name="_token" value="{{ csrf_token('assign' ~ ticket.id) }}">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Asignar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Include Modals -->
{% include 'ticket/_modals.html.twig' %}

{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />

<!-- Schedule Ticket Modal -->
<div class="modal fade" id="scheduleTicketModal" tabindex="-1" aria-labelledby="scheduleTicketModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="scheduleTicketModalLabel">
                    <i class="far fa-calendar-alt me-2"></i>Agendar Ticket
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <form id="scheduleTicketForm" action="{{ path('app_calendar') }}" method="GET">
                <div class="modal-body">
                    <input type="hidden" name="ticket_id" value="{{ ticket.id }}">
                    
                    <div class="mb-3">
                        <label for="scheduledDate" class="form-label fw-bold">Fecha</label>
                        <input type="date" class="form-control" id="scheduledDate" name="date" required 
                               min="{{ 'now'|date('Y-m-d') }}">
                    </div>
                    
                    <div class="mb-3">
                        <label for="scheduledTime" class="form-label fw-bold">Hora</label>
                        <input type="time" class="form-control" id="scheduledTime" name="time" required
                               value="09:00">
                    </div>
                    
                    <div class="mb-3">
                        <label for="duration" class="form-label fw-bold">Duración (minutos)</label>
                        <select class="form-select" id="duration" name="duration">
                            <option value="30">30 minutos</option>
                            <option value="60" selected>1 hora</option>
                            <option value="90">1 hora 30 minutos</option>
                            <option value="120">2 horas</option>
                            <option value="180">3 horas</option>
                            <option value="240">4 horas</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label for="description" class="form-label fw-bold">Descripción (opcional)</label>
                        <textarea class="form-control" id="description" name="description" rows="3" 
                                  placeholder="Agregue detalles sobre la cita..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="far fa-calendar-plus me-1"></i> Agendar
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
// Initialize scheduling form
document.addEventListener('DOMContentLoaded', function() {
    // Set default date and time for scheduling
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    // Format date as YYYY-MM-DD
    const formattedDate = tomorrow.toISOString().split('T')[0];
    
    // Set default date (tomorrow) if not already set
    const dateInput = document.getElementById('scheduledDate');
    if (dateInput && !dateInput.value) {
        dateInput.value = formattedDate;
    }
    
    // Set default time to 9:00 AM if not already set
    const timeInput = document.getElementById('scheduledTime');
    if (timeInput && !timeInput.value) {
        timeInput.value = '09:00';
    }
    
    const assignForm = document.getElementById('assignTicketForm');
    const errorDiv = document.getElementById('userSelectionError');

    if (assignForm) {
        assignForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            // Reset error state
            errorDiv.classList.add('d-none');

            // Get selected users
            const selectedUsers = Array.from(assignForm.querySelectorAll('option:checked'));
            if (selectedUsers.length === 0) {
                errorDiv.classList.remove('d-none');
                return;
            }

            // Show loading state
            const submitBtn = assignForm.querySelector('button[type="submit"]');
            const originalBtnText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Asignando...';

            try {
                const formData = new FormData(assignForm);
                const response = await fetch(assignForm.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) {
                    throw new Error('Error en la respuesta del servidor');
                }

                const data = await response.json();

                if (data.success) {
                    // Success - show toast and reload
                    const toastEl = document.getElementById('toastSuccess');
                    const toast = new bootstrap.Toast(toastEl);
                    document.getElementById('toastMessage').textContent = 'Usuarios asignados correctamente';
                    toast.show();

                    // Close modal and reload page after a short delay
                    const modal = bootstrap.Modal.getInstance(document.getElementById('assignTicketModal'));
                    if (modal) modal.hide();

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    throw new Error(data.message || 'Error al asignar usuarios');
                }
            } catch (error) {
                console.error('Error:', error);
                const toastEl = document.getElementById('toastError');
                const toast = new bootstrap.Toast(toastEl);
                document.getElementById('errorMessage').textContent = error.message || 'Error al procesar la solicitud';
                toast.show();
            } finally {
                // Reset button state
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalBtnText;
            }
        });

        // Initialize select2 for user selection if available
        if (typeof $.fn.select2 !== 'undefined') {
            $('select[name="assigned_users[]"]').select2({
                placeholder: 'Selecciona uno o más usuarios',
                allowClear: true,
                width: '100%',
                dropdownParent: $('#assignTicketModal')
            });
        }
    }

    // Add Note Form Handler
    document.addEventListener('DOMContentLoaded', function() {
        // Show toast notification
        function showToast(type, message) {
            const toastEl = type === 'success' ? document.getElementById('toastSuccess') : document.getElementById('toastError');
            const toastBody = toastEl.querySelector('.toast-body');

            toastBody.textContent = message;
            const toast = new bootstrap.Toast(toastEl);
            toast.show();
        }

        // Add Note Form Handler
        const addNoteForm = document.getElementById('add-note-form');
        if (addNoteForm) {
            addNoteForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                const content = document.getElementById('note-content').value.trim();
                if (!content) return;

                const submitButton = addNoteForm.querySelector('button[type="submit"]');
                const originalButtonText = submitButton.innerHTML;
                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Procesando...';

                try {
                    const response = await fetch(`/api/tickets/notes/add/{{ ticket.id }}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-CSRF-Token': '{{ csrf_token('api_ticket_note_add') }}'
                        },
                        body: `content=${encodeURIComponent(content)}`
                    });

                    const data = await response.json();

                    if (response.ok && data.success) {
                        showToast('success', 'Nota agregada correctamente');
                        // Clear the form
                        document.getElementById('note-content').value = '';
                        // Reload the page after a short delay to show the success message
                        setTimeout(() => window.location.reload(), 1000);
                    } else {
                        throw new Error(data.error || 'Error al agregar la nota');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast('error', error.message || 'Error al agregar la nota. Por favor, inténtalo de nuevo.');
                } finally {
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                }
            });
        }

        // Delete Note Handler
        document.addEventListener('click', async function(e) {
            if (e.target.closest('.delete-note')) {
                const button = e.target.closest('.delete-note');
                const noteId = button.dataset.noteId;

                if (!confirm('¿Estás seguro de que deseas eliminar esta nota?')) {
                    return;
                }

                button.disabled = true;
                const originalButtonHTML = button.innerHTML;
                button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';

                try {
                    const response = await fetch(`/api/tickets/notes/delete/${noteId}`, {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-CSRF-Token': '{{ csrf_token('api_ticket_note_delete') }}'
                        }
                    });

                    const data = await response.json();

                    if (response.ok && data.success) {
                        showToast('success', 'Nota eliminada correctamente');
                        // Remove the note element from the DOM
                        const noteElement = button.closest('.note-item');
                        if (noteElement) {
                            noteElement.remove();
                        }
                    } else {
                        throw new Error(data.error || 'Error al eliminar la nota');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showToast('error', error.message || 'Error al eliminar la nota. Por favor, inténtalo de nuevo.');
                } finally {
                    button.disabled = false;
                    button.innerHTML = originalButtonHTML;
                }
            }
        });

        // Edit Note Handler
        document.addEventListener('click', function(e) {
            if (e.target.closest('.edit-note')) {
                const button = e.target.closest('.edit-note');
                const noteId = button.dataset.noteId;
                const noteContentEl = document.querySelector(`#note-content-${noteId}`);
                const currentContent = noteContentEl.textContent.trim();

                // Create form
                const form = document.createElement('form');
                form.className = 'edit-note-form';
                form.innerHTML = `
                    <div class="input-group mb-3">
                        <textarea class="form-control" name="content" rows="3" required>${currentContent}</textarea>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i>
                        </button>
                        <button type="button" class="btn btn-secondary cancel-edit">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <input type="hidden" name="_token" value="{{ csrf_token('api_ticket_note_edit') }}">
                `;

                // Replace content with form
                noteContentEl.style.display = 'none';
                noteContentEl.after(form);

                // Focus on the textarea
                const textarea = form.querySelector('textarea');
                textarea.focus();
                textarea.setSelectionRange(textarea.value.length, textarea.value.length);

                // Handle form submission
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const content = form.querySelector('textarea').value.trim();

                    if (!content) return;

                    const submitButton = form.querySelector('button[type="submit"]');
                    const originalButtonHTML = submitButton.innerHTML;
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';

                    try {
                        const response = await fetch(`/api/tickets/notes/edit/${noteId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'X-Requested-With': 'XMLHttpRequest',
                                'X-CSRF-Token': '{{ csrf_token('api_ticket_note_edit') }}'
                            },
                            body: `content=${encodeURIComponent(content)}`
                        });

                        const data = await response.json();

                        if (response.ok && data.success) {
                            showToast('success', 'Nota actualizada correctamente');
                            // Update the note content in the DOM
                            noteContentEl.textContent = data.content;
                            form.remove();
                            noteContentEl.style.display = '';
                        } else {
                            throw new Error(data.error || 'Error al actualizar la nota');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        showToast('error', error.message || 'Error al actualizar la nota. Por favor, inténtalo de nuevo.');
                    } finally {
                        submitButton.disabled = false;
                        submitButton.innerHTML = originalButtonHTML;
                    }
                });

                // Handle cancel button
                form.querySelector('.cancel-edit').addEventListener('click', function() {
                    form.remove();
                    noteContentEl.style.display = '';
                });
            }
        });
    });
</script>
{% endblock %}
