{% extends 'base.html.twig' %}

{% block title %}Ticket #{{ '%04d'|format(ticket.id) }} - {{ ticket.title }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .ticket-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border-left: 4px solid #0d6efd;
        }
        .info-card {
            border: none;
            border-radius: 0.5rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            transition: transform 0.2s;
            height: 100%;
        }
        .info-card:hover {
            transform: translateY(-2px);
        }
        .info-card .card-body {
            padding: 1.5rem;
        }
        .info-card .card-title {
            color: #495057;
            font-weight: 600;
            margin-bottom: 1.25rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        .info-card .card-title i {
            color: #0d6efd;
        }
        .info-item {
            margin-bottom: 0.75rem;
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }
        .info-item i {
            color: #6c757d;
            margin-top: 0.25rem;
            min-width: 20px;
        }
        .info-content {
            flex: 1;
        }
        .info-label {
            font-weight: 500;
            color: #495057;
            margin-bottom: 0.25rem;
        }
        .info-value {
            color: #212529;
            word-break: break-word;
        }
        .description-card {
            background-color: #f8f9fa;
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin: 1.5rem 0;
            border-left: 3px solid #0d6efd;
        }
        .action-buttons .btn {
            min-width: 120px;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
        }
        .status-badge {
            font-size: 0.8rem;
            padding: 0.4em 0.8em;
            border-radius: 0.25rem;
            font-weight: 600;
        }
        .timeline {
            position: relative;
            padding-left: 2rem;
            margin: 2rem 0;
        }
        .timeline::before {
            content: '';
            position: absolute;
            left: 0.5rem;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #e9ecef;
        }
        .timeline-item {
            position: relative;
            padding-bottom: 1.5rem;
            padding-left: 1.5rem;
        }
        .timeline-item::before {
            content: '';
            position: absolute;
            left: -1.9rem;
            top: 0.25rem;
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            background: #0d6efd;
            border: 3px solid #fff;
        }
        .timeline-date {
            font-size: 0.8rem;
            color: #6c757d;
            margin-bottom: 0.25rem;
        }
        .timeline-content {
            background: #fff;
            padding: 1rem;
            border-radius: 0.375rem;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.05);
        }
    </style>
{% endblock %}

{% block body %}
<div class="container py-4">
    <div class="ticket-header">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center">
            <div class="mb-3 mb-md-0">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-2">
                        <li class="breadcrumb-item"><a href="{{ path('app_home') }}">Inicio</a></li>
                        <li class="breadcrumb-item"><a href="{{ path('ticket_index') }}">Tickets</a></li>
                        <li class="breadcrumb-item active" aria-current="page">#{{ '%04d'|format(ticket.id) }}</li>
                    </ol>
                </nav>
                <h1 class="h3 mb-0">
                    <i class="fas fa-ticket-alt text-primary me-2"></i>
                    {{ ticket.title }}
                    {% set status_config = {
                        'in_progress': { class: 'warning', label: 'En Progreso' },
                        'pending': { class: 'info', label: 'Pendiente' },
                        'rejected': { class: 'danger', label: 'Rechazado' },
                        'completed': { class: 'success', label: 'Completado' },
                        'delayed': { class: 'warning', label: 'Atrasado' }
                    } %}
                    <span class="ms-2 status-badge badge bg-{{ status_config[ticket.status].class|default('secondary') }}">
                        {{ status_config[ticket.status].label }}
                    </span>
                </h1>
                <div class="d-flex align-items-center mt-2">
                    <span class="me-3">
                        <i class="fas fa-hashtag text-muted me-1"></i>
                        <span class="text-muted">#{{ '%04d'|format(ticket.id) }}</span>
                    </span>
                    {% if ticket.dueDate %}
                        <span class="text-{{ ticket.dueDate|date('Y-m-d') < 'now'|date('Y-m-d') ? 'danger' : 'muted' }}">
                            <i class="far fa-calendar-alt me-1"></i>
                            {{ ticket.dueDate|date('d/m/Y') }}
                        </span>
                    {% endif %}
                </div>
            </div>
            <div class="action-buttons">
                {% if is_granted('ROLE_USER') and not is_granted('ROLE_AUDITOR') and not is_granted('ROLE_ADMIN') %}
                    {% if not ticket.takenBy %}
                        <form method="post" action="{{ path('ticket_take', {'id': ticket.id}) }}" class="d-inline me-2">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-hand-paper me-1"></i> Tomar ticket
                            </button>
                        </form>
                    {% else %}
                        <div class="alert alert-info py-1 px-3 d-inline-flex align-items-center me-2 mb-0">
                            <i class="fas fa-info-circle me-2"></i>
                            {% if ticket.takenBy.id == app.user.id %}
                                Has tomado este ticket
                            {% else %}
                                Ticket tomado por otro usuario
                            {% endif %}
                        </div>
                    {% endif %}
                {% endif %}
                
                {% if is_granted('ROLE_AUDITOR') %}
                    {% if not ticket.takenBy %}
                        <button type="button" 
                                class="btn btn-primary btn-sm {{ ticket.status in ['completed', 'rejected'] ? 'disabled' : '' }}" 
                                data-bs-toggle="modal" 
                                data-bs-target="#assignTicketModal" 
                                data-ticket-id="{{ ticket.id }}"
                                {% if ticket.status in ['completed', 'rejected'] %} 
                                    title="No se pueden asignar usuarios a un ticket cerrado"
                                {% endif %}>
                            <i class="fas fa-user-plus me-1"></i> Asignar
                        </button>
                    {% else %}
                        <button type="button" 
                                class="btn btn-warning btn-sm {{ ticket.status in ['completed', 'rejected'] ? 'disabled' : '' }}" 
                                data-bs-toggle="modal" 
                                data-bs-target="#assignTicketModal" 
                                data-ticket-id="{{ ticket.id }}"
                                {% if ticket.status in ['completed', 'rejected'] %} 
                                    title="No se pueden reasignar usuarios en un ticket cerrado"
                                {% else %}
                                    title="Reasignar ticket a otro usuario"
                                {% endif %}>
                            <i class="fas fa-user-edit me-1"></i> Reasignar
                        </button>
                    {% endif %}
                {% endif %}
                
                {% if is_granted('ROLE_ADMIN') %}
                    <form method="post" action="{{ path('ticket_delete', {'id': ticket.id}) }}" onsubmit="return confirm('¿Está seguro que desea eliminar este ticket?');" class="d-inline">
                        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ ticket.id) }}">
                        <button class="btn btn-danger">
                            <i class="fas fa-trash me-1"></i> Eliminar
                        </button>
                    </form>
                {% endif %}
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="description-card">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">
                        <i class="fas fa-align-left text-primary me-2"></i>
                        Descripción
                    </h5>
                    {% if is_granted('edit', ticket) %}
                        <button type="button" class="btn btn-sm btn-outline-primary" id="editDescriptionBtn">
                            <i class="fas fa-edit me-1"></i> Editar
                        </button>
                    {% endif %}
                </div>
                <div id="descriptionView" class="bg-white p-3 rounded">
                    {{ ticket.description ? ticket.description|nl2br : '<p class="text-muted fst-italic">No hay descripción disponible.</p>'|raw }}
                </div>
                {% if is_granted('edit', ticket) %}
                    <form id="descriptionForm" action="{{ path('ticket_edit_description', {'id': ticket.id}) }}" method="post" class="d-none">
                        <input type="hidden" name="_token" value="{{ csrf_token('edit_description_' ~ ticket.id) }}">
                        <div class="mb-3">
                            <textarea class="form-control" name="description" rows="4" required>{{ ticket.description }}</textarea>
                        </div>
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-outline-secondary" id="cancelEditDescription">
                                <i class="fas fa-times me-1"></i> Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i> Guardar cambios
                            </button>
                        </div>
                    </form>
                {% endif %}
            </div>
            
            <!-- Ticket Actions -->
            {% if is_granted('ROLE_USER') and not is_granted('ROLE_AUDITOR') and not is_granted('ROLE_ADMIN') %}
                <div class="card mb-4">
                    <div class="card-body py-2">
                        <div class="d-flex flex-wrap gap-2 justify-content-between">
                            <h6 class="mb-0 align-self-center">Acciones del ticket:</h6>
                            <div class="d-flex flex-wrap gap-2">
                                <form action="{{ path('ticket_update_status', {'id': ticket.id, 'status': 'rechazado'}) }}" method="post" class="d-inline">
                                    <input type="hidden" name="_token" value="{{ csrf_token('update_status_' ~ ticket.id) }}">
                                    <button type="submit" class="btn btn-outline-danger" 
                                            onclick="return confirm('¿Está seguro de marcar este ticket como rechazado?')">
                                        <i class="fas fa-times-circle me-1"></i> Rechazar
                                    </button>
                                </form>
                                <form action="{{ path('ticket_update_status', {'id': ticket.id, 'status': 'en_progreso'}) }}" method="post" class="d-inline">
                                    <input type="hidden" name="_token" value="{{ csrf_token('update_status_' ~ ticket.id) }}">
                                    <button type="submit" class="btn btn-outline-primary"
                                            {% if ticket.status == 'en_progreso' %}disabled{% endif %}>
                                        <i class="fas fa-play-circle me-1"></i> Continuar
                                    </button>
                                </form>
                                <form action="{{ path('ticket_update_status', {'id': ticket.id, 'status': 'completado'}) }}" method="post" class="d-inline">
                                    <input type="hidden" name="_token" value="{{ csrf_token('update_status_' ~ ticket.id) }}">
                                    <button type="submit" class="btn btn-outline-success"
                                            onclick="return confirm('¿Está seguro de marcar este ticket como completado?')">
                                        <i class="fas fa-check-circle me-1"></i> Terminar
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            {% endif %}

            <!-- Notes Buttons -->
            <div class="mb-4">
                {% if notes|length > 0 %}
                    <button type="button" class="btn btn-outline-primary me-2" id="viewNotesBtn">
                        <i class="fas fa-eye me-1"></i> Ver notas ({{ notes|length }})
                    </button>
                {% endif %}
                {% if is_granted('note', ticket) %}
                    <button type="button" class="btn btn-primary" id="addNoteBtn">
                        <i class="fas fa-plus me-1"></i> Agregar nota
                    </button>
                {% endif %}
            </div>
            
            <!-- Notes List Section (initially hidden) -->
            <div class="card mb-4 d-none" id="viewNotesSection">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-sticky-note text-primary me-2"></i>
                            Notas del Ticket
                        </h5>
                        <button type="button" class="btn-close" id="hideViewNotesBtn" aria-label="Cerrar"></button>
                    </div>
                    <div class="notes-container">
            
            <!-- Add Note Section (initially hidden) -->
            <div class="card mb-4 d-none" id="addNoteSection">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-plus-circle text-primary me-2"></i>
                            Agregar Nota
                        </h5>
                        <button type="button" class="btn-close" id="hideAddNoteBtn" aria-label="Cerrar"></button>
                    </div>
                    <form action="{{ path('ticket_add_note', {'id': ticket.id}) }}" method="post" class="mb-4">
                        <input type="hidden" name="_token" value="{{ csrf_token('add_note_' ~ ticket.id) }}">
                        <div class="mb-3">
                            <label for="noteContent" class="form-label">Escribe tu nota</label>
                            <textarea class="form-control" id="noteContent" name="content" rows="4" 
                                     placeholder="Escribe aquí los detalles de lo que se está haciendo en este ticket..." required></textarea>
                        </div>
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-outline-secondary" id="cancelAddNoteBtn">
                                <i class="fas fa-times me-1"></i> Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i> Guardar nota
                            </button>
                        </div>
                    </form>
                </div>
            </div>
            
            <!-- Notes List -->
            <div class="notes-container">
                        {% if notes|length > 0 %}
                            {% for note in notes %}
                                <div class="card mb-3 {% if note.createdBy == app.user %}border-primary{% endif %}" 
                                     id="note-{{ note.id }}" 
                                     data-csrf-token="{{ csrf_token('edit_note_' ~ note.id) }}">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <div class="d-flex align-items-center">
                                                <span class="badge bg-secondary me-2">
                                                    <i class="fas fa-user me-1"></i>{{ note.createdBy.nombre }} {{ note.createdBy.apellido }}
                                                </span>
                                                <small class="text-muted">
                                                    <i class="far fa-clock me-1"></i>{{ note.createdAt|date('d/m/Y H:i') }}
                                                    {% if note.updatedAt and note.updatedAt != note.createdAt %}
                                                        &nbsp;&bull;&nbsp;
                                                        <i class="fas fa-edit me-1"></i>Modificado: {{ note.updatedAt|date('d/m/Y H:i') }}
                                                    {% endif %}
                                                </small>
                                            </div>
                                            <div class="btn-group">
                                                {% if is_granted('edit', note) or note.createdBy == app.user %}
                                                    <button type="button" class="btn btn-sm btn-outline-primary edit-note" 
                                                            data-note-id="{{ note.id }}" 
                                                            data-content="{{ note.content|e('html_attr') }}">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                {% endif %}
                                                {% if is_granted('ROLE_ADMIN') %}
                                                    <form action="{{ path('ticket_delete_note', {'id': note.id}) }}" method="post" class="d-inline" 
                                                          onsubmit="return confirm('¿Está seguro de eliminar esta nota permanentemente?')">
                                                        <input type="hidden" name="_token" value="{{ csrf_token('delete_note_' ~ note.id) }}">
                                                        <button type="submit" class="btn btn-sm btn-outline-danger">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </form>
                                                {% endif %}
                                            </div>
                                        </div>
                                        <div class="note-content">
                                            <p class="card-text">{{ note.content|nl2br }}</p>
                                        </div>
                                    </div>
                                </div>
                            {% endfor %}
                        {% else %}
                            <div class="text-center py-4 text-muted">
                                <i class="fas fa-inbox fa-2x mb-2"></i>
                                <p class="mb-0">No hay notas para mostrar</p>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card info-card mb-4">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="fas fa-info-circle"></i>
                        Información del ticket
                    </h5>
                    <div class="info-item">
                        <i class="fas fa-fingerprint"></i>
                        <div class="info-content">
                            <div class="info-label">ID Externo</div>
                            <div class="info-value">{{ ticket.idSistemaInterno ?: 'No especificado' }}</div>
                        </div>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-layer-group"></i>
                        <div class="info-content">
                            <div class="info-label">Área de Origen</div>
                            <div class="info-value">{{ ticket.areaOrigen ?: 'No especificada' }}</div>
                        </div>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-user-plus"></i>
                        <div class="info-content">
                            <div class="info-label">Creado por</div>
                            <div class="info-value">
                                <i class="fas fa-user-circle me-1"></i>
                                {{ ticket.createdBy.email }}
                            </div>
                        </div>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-calendar-plus"></i>
                        <div class="info-content">
                            <div class="info-label">Fecha de creación</div>
                            <div class="info-value">{{ ticket.createdAt|date('d/m/Y H:i') }}</div>
                        </div>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-user-tag"></i>
                        <div class="info-content">
                            <div class="info-label">Asignado a</div>
                            <div class="info-value">
                                {% if ticket.takenBy %}
                                    {% set user = ticket.takenBy %}
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-user-check me-2"></i>
                                        <div class="d-flex flex-column">
                                            <div class="d-flex align-items-center">
                                                <span class="fw-medium">{{ user.nombre }} {{ user.apellido }}</span>
                                                {% if 'ROLE_AUDITOR' in user.roles %}
                                                    <span class="badge bg-info ms-2">Auditor</span>
                                                {% else %}
                                                    <span class="badge bg-secondary ms-2">Usuario</span>
                                                {% endif %}
                                            </div>
                                            {% set assignment = ticket.ticketAssignments|last %}
                                            {% if assignment %}
                                                <div class="mt-1">
                                                    <span class="badge bg-light text-dark">
                                                        <i class="far fa-clock me-1"></i>
                                                        Asignado el {{ assignment.assignedAt|date('d/m/Y H:i:s') }}
                                                    </span>
                                                </div>
                                            {% endif %}
                                        </div>
                                    </div>
                                {% else %}
                                    <span class="text-muted">Sin asignar</span>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                    {% if ticket.dueDate %}
                        <div class="info-item">
                            <i class="fas fa-calendar-check"></i>
                            <div class="info-content">
                                <div class="info-label">Fecha límite</div>
                                <div class="info-value">
                                    <i class="far fa-clock me-1"></i>
                                    {{ ticket.dueDate|date('d/m/Y') }}
                                    {% if ticket.dueDate|date('Y-m-d') < 'now'|date('Y-m-d') %}
                                        <span class="badge bg-danger ms-2">Vencido</span>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    {% endif %}

                    {% if is_granted('ROLE_AUDITOR') or is_granted('ROLE_ADMIN') %}
                        <div class="info-item">
                            <i class="fas fa-user-check"></i>
                            <div class="info-content">
                                <div class="info-label">Tomado por</div>
                                <div class="info-value">
                                    {% if ticket.takenBy %}
                                        <div class="d-flex flex-column">
                                            <div class="d-flex align-items-center">
                                                <i class="fas fa-user me-2"></i>
                                                <span class="fw-medium">{{ ticket.takenBy.nombre }} {{ ticket.takenBy.apellido }}</span>
                                            </div>
                                            <div class="mt-1">
                                                <span class="badge bg-light text-dark">
                                                    <i class="far fa-clock me-1"></i>
                                                    Tomado el {{ ticket.takenAt|date('d/m/Y H:i:s') }}
                                                </span>
                                            </div>
                                        </div>
                                    {% else %}
                                        <span class="text-muted">Nadie ha tomado este ticket</span>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    {% endif %}
                </div>
            </div>

        </div>
    </div>
</div>

<!-- Assign Ticket Modal -->
<div class="modal fade" id="assignTicketModal" tabindex="-1" aria-labelledby="assignTicketModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="assignTicketModalLabel">Asignar Ticket</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>

      <form action="{{ path('ticket_assign') }}" method="post" onsubmit="return false;">
        <input type="hidden" name="_token" value="{{ csrf_token('assign_ticket') }}">
        <input type="hidden" name="ticket_id" id="assign_ticket_id">
        <div class="modal-body">

          <div class="mb-3">
            <label class="form-label mb-3">Seleccionar usuarios para asignar:</label>
            <div class="list-group" style="max-height: 300px; overflow-y: auto;">
              {% for user in users|default([]) %}
                <label class="list-group-item d-flex align-items-center">
                  <input class="form-check-input me-2" 
                         type="checkbox" 
                         name="assigned_users[]" 
                         value="{{ user.id }}" 
                         {% if ticket.isAssignedToUser(user) %}checked{% endif %}
                         {% if ticket.status in ['completed', 'rejected'] %}disabled{% endif %}>
                  <div>
                    <div class="fw-bold">{{ user.nombre }} {{ user.apellido }}</div>
                    <small class="text-muted">{{ user.email }}</small>
                    <span class="badge bg-{{ 'ROLE_AUDITOR' in user.roles ? 'info' : 'secondary' }} ms-2">
                      {{ 'ROLE_AUDITOR' in user.roles ? 'Auditor' : 'Usuario' }}
                    </span>
                  </div>
                </label>
              {% endfor %}
            </div>
            <div id="userSelectionError" class="invalid-feedback d-none">
              Por favor seleccione al menos un usuario.
            </div>
          </div>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-primary">Asignar</button>
        </div>
      </form>
    </div>
  </div>
</div>

{% block javascripts %}
    {{ parent() }}
    <script>
        // Initialize when DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Notes section elements
            const viewNotesBtn = document.getElementById('viewNotesBtn');
            const addNoteBtn = document.getElementById('addNoteBtn');
            const viewNotesSection = document.getElementById('viewNotesSection');
            const addNoteSection = document.getElementById('addNoteSection');
            
            // Show notes list (for View Notes button)
            if (viewNotesBtn && viewNotesSection) {
                viewNotesBtn.addEventListener('click', function() {
                    viewNotesSection.classList.remove('d-none');
                    addNoteSection.classList.add('d-none');
                    if (viewNotesBtn) viewNotesBtn.classList.add('d-none');
                    if (addNoteBtn) addNoteBtn.classList.remove('d-none');
                    viewNotesSection.scrollIntoView({ behavior: 'smooth' });
                });
            }
            
            // Show add note form (for Add Note button)
            if (addNoteBtn && addNoteSection) {
                addNoteBtn.addEventListener('click', function() {
                    addNoteSection.classList.remove('d-none');
                    viewNotesSection.classList.add('d-none');
                    if (viewNotesBtn) viewNotesBtn.classList.remove('d-none');
                    addNoteBtn.classList.add('d-none');
                    document.getElementById('noteContent').focus();
                    addNoteSection.scrollIntoView({ behavior: 'smooth' });
                });
            }
            
            // Hide view notes section
            const hideViewNotesBtn = document.getElementById('hideViewNotesBtn');
            if (hideViewNotesBtn && viewNotesSection) {
                hideViewNotesBtn.addEventListener('click', function() {
                    viewNotesSection.classList.add('d-none');
                    if (viewNotesBtn) viewNotesBtn.classList.remove('d-none');
                });
            }
            
            // Hide add note section
            const hideAddNoteBtn = document.getElementById('hideAddNoteBtn');
            const cancelAddNoteBtn = document.getElementById('cancelAddNoteBtn');
            
            const hideAddNoteSection = function() {
                addNoteSection.classList.add('d-none');
                if (viewNotesBtn) viewNotesBtn.classList.remove('d-none');
                if (addNoteBtn) addNoteBtn.classList.remove('d-none');
                document.getElementById('noteContent').value = '';
            };
            
            if (hideAddNoteBtn) hideAddNoteBtn.addEventListener('click', hideAddNoteSection);
            if (cancelAddNoteBtn) cancelAddNoteBtn.addEventListener('click', hideAddNoteSection);
            
            // Handle description editing
            const editDescriptionBtn = document.getElementById('editDescriptionBtn');
            const cancelEditDescription = document.getElementById('cancelEditDescription');
            const descriptionView = document.getElementById('descriptionView');
            const descriptionForm = document.getElementById('descriptionForm');
            
            if (editDescriptionBtn && descriptionView && descriptionForm) {
                editDescriptionBtn.addEventListener('click', function() {
                    descriptionView.classList.add('d-none');
                    descriptionForm.classList.remove('d-none');
                    editDescriptionBtn.classList.add('d-none');
                    descriptionForm.querySelector('textarea').focus();
                });
                
                cancelEditDescription.addEventListener('click', function() {
                    descriptionView.classList.remove('d-none');
                    descriptionForm.classList.add('d-none');
                    editDescriptionBtn.classList.remove('d-none');
                });
                
                // Handle form submission
                descriptionForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    const formData = new FormData(this);
                    
                    fetch(this.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            descriptionView.innerHTML = data.description.replace(/\n/g, '<br>');
                            descriptionView.classList.remove('d-none');
                            descriptionForm.classList.add('d-none');
                            editDescriptionBtn.classList.remove('d-none');
                            
                            // Show success message
                            const alert = document.createElement('div');
                            alert.className = 'alert alert-success alert-dismissible fade show mt-3';
                            alert.innerHTML = `
                                <i class="fas fa-check-circle me-2"></i> Descripción actualizada correctamente.
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            `;
                            descriptionView.parentNode.insertBefore(alert, descriptionView.nextSibling);
                            
                            // Auto-hide alert after 3 seconds
                            setTimeout(() => {
                                const bsAlert = new bootstrap.Alert(alert);
                                bsAlert.close();
                            }, 3000);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Error al actualizar la descripción');
                    });
                });
            }
            
            // Handle ticket status updates
            document.querySelectorAll('form[action*="ticket_update_status"]').forEach(form => {
                form.addEventListener('submit', function(e) {
                    if (!confirm('¿Está seguro de realizar esta acción?')) {
                        e.preventDefault();
                        return false;
                    }
                    
                    // Show loading state
                    const button = this.querySelector('button[type="submit"]');
                    const originalText = button.innerHTML;
                    button.disabled = true;
                    button.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Procesando...';
                    
                    return true; // Allow form submission
                });
            });
            
            // Handle edit note functionality
            document.addEventListener('click', function(e) {
                // Edit note button click
                if (e.target.closest('.edit-note')) {
                    const button = e.target.closest('.edit-note');
                    const noteId = button.dataset.noteId;
                    const noteContent = button.dataset.content;
                    const noteElement = document.getElementById(`note-${noteId}`);
                    
                    // Get CSRF token from the note element
                    const csrfToken = noteElement.dataset.csrfToken;
                    
                    // Create edit form
                    const editForm = document.createElement('form');
                    editForm.action = `/tickets/note/${noteId}/edit`;
                    editForm.method = 'post';
                    editForm.className = 'mt-3';
                    editForm.innerHTML = `
                        <input type="hidden" name="_token" value="${csrfToken}">
                        <div class="mb-3">
                            <textarea class="form-control" name="content" rows="3" required>${noteContent}</textarea>
                        </div>
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary cancel-edit">
                                <i class="fas fa-times me-1"></i> Cancelar
                            </button>
                            <button type="submit" class="btn btn-sm btn-primary">
                                <i class="fas fa-save me-1"></i> Guardar cambios
                            </button>
                        </div>
                    `;
                    
                    // Replace content with form
                    const contentDiv = noteElement.querySelector('.note-content');
                    const originalContent = contentDiv.innerHTML;
                    contentDiv.innerHTML = '';
                    contentDiv.appendChild(editForm);
                    
                    // Focus on textarea
                    const textarea = editForm.querySelector('textarea');
                    textarea.focus();
                    
                    // Handle cancel edit
                    const cancelBtn = editForm.querySelector('.cancel-edit');
                    cancelBtn.addEventListener('click', function() {
                        contentDiv.innerHTML = originalContent;
                    });
                    
                    // Handle form submission
                    editForm.addEventListener('submit', function(e) {
                        e.preventDefault();
                        
                        fetch(editForm.action, {
                            method: 'POST',
                            body: new FormData(editForm),
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Update note content
                                contentDiv.innerHTML = `<p class="card-text">${data.content.replace(/\n/g, '<br>')}</p>`;
                                // Update edit button data
                                button.dataset.content = data.content;
                            } else {
                                alert('Error al actualizar la nota');
                                contentDiv.innerHTML = originalContent;
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Error al actualizar la nota');
                            contentDiv.innerHTML = originalContent;
                        });
                    });
                }
            });

            // Initialize assign ticket modal
            const assignModal = document.getElementById('assignTicketModal');
            if (assignModal) {
                const assignForm = assignModal.querySelector('form');
                // When modal is shown
                assignModal.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    const ticketId = button.getAttribute('data-ticket-id');
                    const modalTicketId = document.getElementById('assign_ticket_id');
                    if (modalTicketId) {
                        modalTicketId.value = ticketId;
                        console.log('Setting ticket ID:', ticketId);
                    }
                });
                
                // When form is submitted
                if (assignForm) {
                    assignForm.addEventListener('submit', function(e) {
                        e.preventDefault();
                        const checkboxes = assignForm.querySelectorAll('input[name^="assigned_users"]:checked');
                        const errorElement = document.getElementById('userSelectionError');
                        
                        if (checkboxes.length === 0) {
                            errorElement.classList.remove('d-none');
                            return false;
                        }
                        
                        errorElement.classList.add('d-none');
                        
                        // Submit the form via AJAX
                        fetch(assignForm.action, {
                            method: 'POST',
                            body: new FormData(assignForm)
                        })
                        .then(response => {
                            if (response.ok) {
                                // Close the modal on success
                                const modal = bootstrap.Modal.getInstance(assignModal);
                                modal.hide();
                                // Optionally refresh the page to see changes
                                window.location.reload();
                            }
                        })
                        .catch(error => console.error('Error:', error));
                        
                        return false;
                    });
                }
            }
        });
    </script>
{% endblock %}

{% endblock %}
