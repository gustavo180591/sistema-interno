{% extends 'base.html.twig' %}

{% block title %}Ticket #{{ ticket.id }} - {{ ticket.descripcion|u.truncate(30, '...') }}{% endblock %}

{% block body %}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">
            <a href="{{ path('ticket_lista') }}" class="text-decoration-none text-dark">
                <i class="bi bi-arrow-left"></i>
            </a>
            Ticket #{{ ticket.ticketId }}
        </h1>
        <div class="d-flex gap-2">
            <a href="{{ path('ticket_editar', {'id': ticket.id}) }}" class="btn btn-outline-primary">
                <i class="bi bi-pencil"></i> Editar
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Detalles del Ticket</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6 class="text-muted mb-1">Descripción</h6>
                        <p class="mb-0">{{ ticket.descripcion }}</p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-muted mb-1">Estado</h6>
                            <span class="badge bg-{{ ticket.estado == 'completado' ? 'success' : (ticket.estado == 'en_progreso' ? 'primary' : 'warning') }}">
                                {{ ticket.estado|replace({'_': ' '})|title }}
                            </span>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-muted mb-1">Departamento</h6>
                            <p class="mb-0">{{ ticket.departamentoNombre }}</p>
                        </div>
                    </div>
                    
                    {% if ticket.pedido %}
                    <div class="mt-3">
                        <h6 class="text-muted mb-1">Pedido</h6>
                        <p class="mb-0">{{ ticket.pedido }}</p>
                    </div>
                    {% endif %}
                </div>
            </div>

            <!-- Tareas Pendientes -->
            <div class="card">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Tareas Pendientes</h5>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        {% for task in ticket.tasks %}
                            <div class="list-group-item">
                                <div class="form-check d-flex align-items-center">
                                    <input class="form-check-input me-3 task-checkbox" 
                                           type="checkbox" 
                                           data-task-id="{{ task.id }}"
                                           {{ task.completed ? 'checked' : '' }}
                                           style="width: 1.2rem; height: 1.2rem;">
                                    <label class="form-check-label flex-grow-1 {{ task.completed ? 'text-muted text-decoration-line-through' : '' }}">
                                        {{ task.description }}
                                        <small class="d-block text-muted">
                                            Creado el {{ task.createdAt|date('d/m/Y H:i') }}
                                            {% if task.completedAt %}
                                                <span class="task-completed-at">• Completado el {{ task.completedAt|date('d/m/Y H:i') }}</span>
                                            {% endif %}
                                        </small>
                                    </label>
                                    <button class="btn btn-sm btn-outline-danger delete-task" data-task-id="{{ task.id }}">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        {% else %}
                            <div class="text-center p-4 text-muted">
                                No hay tareas pendientes. ¡Agrega una nueva tarea!
                            </div>
                        {% endfor %}
                    </div>
                    
                    <div class="p-3 border-top">
                        {{ form_start(task_form, {'attr': {'class': 'd-flex gap-2'}}) }}
                            <div class="flex-grow-1">
                                {{ form_widget(task_form.description, {'attr': {
                                    'class': 'form-control',
                                    'placeholder': 'Añadir una nueva tarea...'
                                }}) }}
                            </div>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-plus-lg"></i> Agregar
                            </button>
                        {{ form_end(task_form) }}
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Información del Ticket</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6 class="text-muted mb-1">Creado por</h6>
                        <p class="mb-0">
                            {{ ticket.createdBy.nombre }} {{ ticket.createdBy.apellido }}
                        </p>
                    </div>
                    <div class="mb-3">
                        <h6 class="text-muted mb-1">Fecha de creación</h6>
                        <p class="mb-0">{{ ticket.createdAt|date('d/m/Y H:i') }}</p>
                    </div>
                    <div>
                        <h6 class="text-muted mb-1">ID del ticket</h6>
                        <p class="mb-0">{{ ticket.ticketId }}</p>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header bg-white">
                    <h5 class="mb-0">Colaboradores</h5>
                </div>
                <div class="card-body">
                    <ul class="list-unstyled mb-0">
                        {# Use a set to track displayed user IDs #}
                        {% set displayed_users = [] %}
                        
                        {# Add creator first #}
                        {% if ticket.createdBy %}
                            {% set creator_id = ticket.createdBy.id %}
                            {% set displayed_users = displayed_users|merge([creator_id]) %}
                            <li class="mb-2">
                                <i class="bi bi-person-fill me-2"></i>
                                {{ ticket.createdBy.nombre }} {{ ticket.createdBy.apellido }} (Creador)
                            </li>
                        {% endif %}
                        
                        {# Add collaborators, skipping duplicates #}
                        {% for collaborator in ticket.collaborators %}
                            {% if collaborator.user and collaborator.user.id not in displayed_users %}
                                {% set displayed_users = displayed_users|merge([collaborator.user.id]) %}
                                <li class="mb-2">
                                    <i class="bi bi-person me-2"></i>
                                    {{ collaborator.user.nombre }} {{ collaborator.user.apellido }}
                                    {% if collaborator.user.id == ticket.createdBy.id %}(Creador){% endif %}
                                </li>
                            {% endif %}
                        {% endfor %}
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3" id="toast-container">
    <div id="toast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body"></div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<!-- Delete Task Modal -->
<div class="modal fade" id="deleteTaskModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Eliminar tarea</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                ¿Estás seguro de que deseas eliminar esta tarea? Esta acción no se puede deshacer.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteTask">Eliminar</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Task completion toggle
    document.querySelectorAll('.task-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', async function() {
            const taskId = this.dataset.taskId;
            const isCompleted = this.checked;
            const taskItem = this.closest('.list-group-item');
            const label = taskItem.querySelector('.form-check-label');
            const completedAtElement = taskItem.querySelector('.task-completed-at');
            
            try {
                const url = '{{ path("task_toggle", {"id": "TASK_ID"}) }}'.replace('TASK_ID', taskId);
                
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'X-CSRF-Token': csrfToken,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        completed: isCompleted,
                        _token: csrfToken
                    })
                });

                if (!response.ok) {
                    const error = await response.json().catch(() => ({}));
                    throw new Error(error.error || 'Error en el servidor');
                }
                
                const data = await response.json();
                
                if (!data.ok) {
                    throw new Error(data.error || 'Error al actualizar la tarea');
                }
                
                // Update UI on success
                if (data.completed) {
                    label.classList.add('text-muted', 'text-decoration-line-through');
                    if (data.completedAt && !completedAtElement) {
                        const completedAt = document.createElement('small');
                        completedAt.className = 'd-block text-muted task-completed-at';
                        completedAt.textContent = `• Completado el ${data.completedAt}`;
                        label.appendChild(completedAt);
                    }
                } else {
                    label.classList.remove('text-muted', 'text-decoration-line-through');
                    if (completedAtElement) {
                        completedAtElement.remove();
                    }
                }
                
                // Show success message
                showToast(data.completed ? '✅ Tarea completada' : '🔄 Tarea marcada como pendiente');
                
            } catch (error) {
                console.error('Error:', error);
                this.checked = !isCompleted; // Revert checkbox state
                showToast('Error al actualizar la tarea: ' + (error.message || 'Error desconocido'), 'danger');
            }
        });
    });
    
    // Helper function to show toast messages
    function showToast(message, type = 'success') {
        const toastEl = document.getElementById('toast');
        if (!toastEl) return;
        
        const toastBody = toastEl.querySelector('.toast-body');
        const toast = new bootstrap.Toast(toastEl);
        
        // Update toast appearance based on message type
        if (type === 'danger') {
            toastEl.classList.add('bg-danger', 'text-white');
            toastEl.classList.remove('bg-success');
        } else {
            toastEl.classList.add('bg-success', 'text-white');
            toastEl.classList.remove('bg-danger');
        }
        
        if (toastBody) {
            toastBody.textContent = message;
            toast.show();
        }
    }
    
    // Delete task
    let taskToDelete = null;
    const deleteButtons = document.querySelectorAll('.delete-task');
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteTaskModal'));
    
    // Get CSRF token from meta tag
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    
    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            taskToDelete = this.dataset.taskId;
            deleteModal.show();
        });
    });
    
    document.getElementById('confirmDeleteTask')?.addEventListener('click', async function() {
        if (!taskToDelete) return;
        
        try {
            const response = await fetch(`/task/${taskToDelete}`, {
                method: 'DELETE',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': csrfToken,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    _token: csrfToken,
                    _method: 'DELETE'
                })
            });
            
            const data = await response.json();
            
            if (data.ok) {
                // Remove the task from the UI
                document.querySelector(`.delete-task[data-task-id="${taskToDelete}"]`).closest('.list-group-item').remove();
                
                // Show success message
                showToast('Tarea eliminada correctamente');
                
                // If no tasks left, show the empty state
                const taskList = document.querySelector('.list-group');
                if (taskList.children.length === 1) { // Only the empty state message remains
                    taskList.innerHTML = `
                        <div class="text-center p-4 text-muted">
                            No hay tareas pendientes. ¡Agrega una nueva tarea!
                        </div>
                    `;
                }
            } else {
                throw new Error(data.error || 'Error al eliminar la tarea');
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error al eliminar la tarea: ' + (error.message || 'Error desconocido'), 'danger');
        } finally {
            deleteModal.hide();
            taskToDelete = null;
        }
    });
    
    // Initialize Bootstrap tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>
{% endblock %}
