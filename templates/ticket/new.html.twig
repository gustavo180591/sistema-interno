{% extends 'base.html.twig' %}

{% block title %}Nuevo Ticket - Sistema Interno{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- Select2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --accent-color: #e74c3c;
            --light-gray: #f8f9fa;
            --border-radius: 0.5rem;
            --box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.08);
            --transition: all 0.3s ease;
        }

        body {
            background-color: #f5f7fa;
            color: #333;
        }

        .form-control, .form-select, .select2-container--bootstrap-5 .select2-selection {
            border: 1px solid #e1e5eb;
            border-radius: var(--border-radius);
            padding: 0.6rem 1rem;
            font-size: 0.95rem;
            transition: var(--transition);
            background-color: #fff;
        }

        .form-control:focus, .form-select:focus, .select2-container--bootstrap-5.select2-container--focus .select2-selection {
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 0.25rem rgba(52, 152, 219, 0.25);
        }

        .form-label {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .card {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            margin-bottom: 1.5rem;
            overflow: hidden;
            transition: var(--transition);
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 0.75rem 2rem rgba(0, 0, 0, 0.1);
        }

        .card-header {
            background-color: var(--primary-color);
            color: white;
            padding: 1.25rem 1.5rem;
            border-bottom: none;
        }

        .card-header h6 {
            margin: 0;
            font-weight: 600;
            display: flex;
            align-items: center;
        }

        .card-header h6 i {
            margin-right: 0.5rem;
        }

        .card-body {
            padding: 1.5rem;
            background-color: #fff;
        }

        .btn {
            font-weight: 600;
            padding: 0.65rem 1.5rem;
            border-radius: var(--border-radius);
            transition: var(--transition);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-size: 0.85rem;
        }

        .btn-primary {
            background-color: var(--secondary-color);
            border-color: var(--secondary-color);
        }

        .btn-primary:hover {
            background-color: #2980b9;
            border-color: #2980b9;
            transform: translateY(-1px);
        }

        .btn-outline-secondary {
            color: #6c757d;
            border-color: #dee2e6;
        }

        .btn-outline-secondary:hover {
            background-color: var(--light-gray);
            border-color: #ced4da;
            color: #495057;
        }

        /* Custom styles for select2 */
        .select2-container--bootstrap-5 .select2-selection {
            min-height: 45px;
            display: flex;
            align-items: center;
        }

        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            padding-left: 0.5rem;
            color: #495057;
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: #bdc3c7;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #95a5a6;
        }

        /* Animation for form elements */
        .form-group {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .card-body {
                padding: 1rem;
            }
            
            .btn {
                width: 100%;
                margin-bottom: 0.5rem;
            }
            
            .d-md-flex .btn:not(:last-child) {
                margin-right: 0;
            }
        }
        .select2-container--bootstrap-5 .select2-selection {
            min-height: 48px;
            display: flex;
            align-items: center;
        }
        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__rendered {
            padding-left: 0.5rem;
        }
        .file-upload-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }
        .file-upload-wrapper input[type=file] {
            font-size: 100px;
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            cursor: pointer;
            height: 100%;
            width: 100%;
        }
        .file-upload-wrapper .form-control {
            background-color: #f8f9fa;
            border: 2px dashed #dee2e6;
            padding: 1.5rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
        }
        .file-upload-wrapper:hover .form-control {
            border-color: #0d6efd;
            background-color: #f1f7ff;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm border-0 rounded-3 overflow-hidden">
                <!-- Card Header -->
                <div class="card-header bg-primary text-white py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h1 class="h5 mb-0">
                            <i class="fas fa-ticket-alt me-2"></i>Nuevo Ticket
                        </h1>
                        <div class="d-flex align-items-center">
                            <form id="assignTicketForm" onsubmit="event.preventDefault(); handleAssignUsers(event);">
                                <a href="{{ path('ticket_index') }}" class="btn btn-sm btn-outline-light">
                                    <i class="fas fa-arrow-left me-1"></i> Volver
                                </a>
                            </form>
                        </div>
                    </div>
                </div>

                <div class="card-body p-4">
                    <!-- Form -->
                    {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
                        <div class="row g-4">
                            <!-- Left Column -->
                            <div class="col-lg-8">
                                <div class="card border-0 shadow-sm mb-4">
                                    <div class="card-header bg-light py-3">
                                        <h6 class="mb-0 fw-bold"><i class="fas fa-info-circle me-2"></i>Información del Ticket</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row g-4">
                                            <!-- ID Externo -->
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    {{ form_label(form.idSistemaInterno, 'ID Externo', {'label_attr': {
                                                        'class': 'form-label fw-medium text-muted small mb-2'
                                                    }}) }}
                                                    <div class="input-group">
                                                        <span class="input-group-text bg-light">
                                                            <i class="fas fa-external-link-alt text-muted"></i>
                                                        </span>
                                                        {{ form_widget(form.idSistemaInterno, {
                                                            'attr': {
                                                                'class': 'form-control form-control-lg',
                                                                'placeholder': 'Ingrese el ID externo'
                                                            }
                                                        }) }}
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Área de Origen -->
                                            <div class="col-md-6">
                                                <div class="mb-3">
                                                    {{ form_label(form.areaOrigen, 'Área de Origen', {'label_attr': {
                                                        'class': 'form-label fw-medium text-muted small mb-2'
                                                    }}) }}
                                                    <div class="input-group">
                                                        <span class="input-group-text bg-light">
                                                            <i class="fas fa-building text-muted"></i>
                                                        </span>
                                                        {{ form_widget(form.areaOrigen, {
                                                            'attr': {
                                                                'class': 'form-select form-select-lg select2-search',
                                                                'data-placeholder': 'Seleccione un área de origen...'
                                                            }
                                                        }) }}
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Título -->
                                            <div class="col-12">
                                                <div class="mb-3">
                                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                                        {{ form_label(form.title, 'Título del Ticket', {'label_attr': {
                                                            'class': 'form-label fw-medium text-muted small mb-0'
                                                        }}) }}
                                                    </div>
                                                    <div class="input-group">
                                                        <span class="input-group-text bg-light">
                                                            <i class="fas fa-heading text-muted"></i>
                                                        </span>
                                                        {{ form_widget(form.title, {
                                                            'attr': {
                                                                'class': 'form-control form-control-lg',
                                                                'placeholder': 'Ingrese un título descriptivo para el ticket',
                                                                'required': 'required'
                                                            }
                                                        }) }}
                                                    </div>
                                                    <small class="form-text text-muted">Describa brevemente el problema o solicitud</small>
                                                </div>
                                            </div>

                                            <!-- Asignar a múltiples usuarios -->
                                            <div class="col-12">
                                                <div class="mb-3">
                                                    <label class="form-label fw-medium text-muted small mb-2 d-block">Asignar a</label>
                                                    <div class="users-checkbox-container">
                                                        {% for user in users %}
                                                            <div class="form-check form-check-inline mb-2 me-3">
                                                                {% set isChecked = false %}
                                                                {% if form.assignedUsers.vars.value is defined %}
                                                                    {% for assignedUser in form.assignedUsers.vars.value %}
                                                                        {% if assignedUser.id is defined and assignedUser.id == user.id %}
                                                                            {% set isChecked = true %}
                                                                        {% endif %}
                                                                    {% endfor %}
                                                                {% endif %}
                                                                <input type="checkbox" 
                                                                       id="assignedUsers_{{ user.id }}" 
                                                                       name="ticket[assignedUsers][]" 
                                                                       value="{{ user.id }}" 
                                                                       class="form-check-input"
                                                                       {% if isChecked %}checked{% endif %}>
                                                                <label class="form-check-label" for="assignedUsers_{{ user.id }}">
                                                                    {{ user.nombre }} {{ user.apellido }}
                                                                </label>
                                                            </div>
                                                        {% endfor %}
                                                    </div>
                                                </div>
                                            </div>
                                            <style>
                                                .users-checkbox-container {
                                                    max-height: 200px;
                                                    overflow-y: auto;
                                                    padding: 10px;
                                                    border: 1px solid #dee2e6;
                                                    border-radius: 0.375rem;
                                                }
                                                .form-check-input {
                                                    margin-top: 0.2rem;
                                                }
                                            </style>
                                        </div>
                                    </div>
                                </div>

                                <!-- Submit Buttons -->
                                <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                                    <button type="button" class="btn btn-outline-secondary me-md-2" onclick="window.history.back()">
                                        <i class="fas fa-times me-1"></i> Cancelar
                                    </button>
                                    <button type="submit" class="btn btn-primary px-4">
                                        <i class="fas fa-plus me-1"></i> Crear Ticket
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Right Column - Removed Assigned Users Section -->
                            <div class="col-lg-4">
                                <!-- User assignment has been removed from the creation form -->
                            </div>
                            </div>
                        </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Assign Ticket Modal -->
<div class="modal fade" id="assignTicketModal" tabindex="-1" aria-labelledby="assignTicketModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assignTicketModalLabel">Asignar Ticket</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>

            <form id="assignTicketForm" onsubmit="return false;">
                <input type="hidden" name="_token" value="{{ csrf_token('assign_ticket') }}">
                <input type="hidden" name="ticket_id" id="assign_ticket_id" value="new">
                <input type="hidden" name="is_reassignment" id="is_reassignment" value="0">
                <input type="hidden" name="previous_assignee" id="previous_assignee" value="">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label mb-3">Seleccionar usuarios para asignar:</label>
                        <div class="list-group mb-3" style="max-height: 250px; overflow-y: auto;" id="userList">
                            {% for user in users|default([]) %}
                                {% set isAssigned = false %}
                                {% if form.assignedUsers.vars.data is not empty %}
                                    {% for assignedUser in form.assignedUsers.vars.data %}
                                        {% if assignedUser.id == user.id %}
                                            {% set isAssigned = true %}
                                        {% endif %}
                                    {% endfor %}
                                {% endif %}
                                <label class="list-group-item d-flex align-items-center">
                                    <input class="form-check-input me-2"
                                           type="checkbox"
                                           name="assigned_users[]"
                                           value="{{ user.id }}"
                                           {% if isAssigned %}checked{% endif %}>
                                    <div>
                                        <div class="fw-bold">{{ user.nombre }} {{ user.apellido }}</div>
                                        <small class="text-muted">{{ user.email }}</small>
                                        <span class="badge bg-{{ 'ROLE_AUDITOR' in user.roles ? 'info' : 'secondary' }} ms-2">
                                            {{ 'ROLE_AUDITOR' in user.roles ? 'Auditor' : 'Usuario' }}
                                            {% if isAssigned %}(Asignado){% endif %}
                                        </span>
                                    </div>
                                </label>
                            {% endfor %}
                        </div>
                        <div id="userSelectionError" class="invalid-feedback d-none">
                            Por favor seleccione al menos un usuario.
                        </div>

                        <!-- Reason for reassignment (initially hidden) -->
                        <div id="reassignmentReasonContainer" class="mt-3 d-none">
                            <label for="reassignment_reason" class="form-label">Motivo de la reasignación:</label>
                            <textarea class="form-control" id="reassignment_reason" name="reassignment_reason"
                                      rows="3"
                                      placeholder="Explique por qué está reasignando este ticket"></textarea>
                            <div id="reassignmentReasonError" class="invalid-feedback">
                                Por favor proporcione un motivo para la reasignación.
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Asignar</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Success Toast -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="toastAssignmentSuccess" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-success text-white">
            <i class="fas fa-check-circle me-2"></i>
            <strong class="me-auto">¡Asignación exitosa!</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Cerrar"></button>
        </div>
        <div class="toast-body">
            Se han asignado <span id="assignedUsersCount">0</span> usuario(s) al ticket.
        </div>
    </div>
</div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <!-- Select2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/i18n/es.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // State management
            const state = {
                users: [],
                selectedUsers: new Map(),
                searchTerm: ''
            };

            // DOM elements
            const elements = {
                userList: document.getElementById('userList'),
                userSearch: document.getElementById('userSearch'),
                assignForm: document.getElementById('assignTicketForm'),
                assignedUsersList: document.getElementById('assignedUsersList'),
                assignBtn: document.getElementById('assignUsersBtn')
            };

            // Initialize the application
            async function init() {
                setupEventListeners();
                await loadUsers();
                loadAssignedUsers();
            }

            // Set up event listeners
            function setupEventListeners() {
                // Search functionality
                if (elements.userSearch) {
                    elements.userSearch.addEventListener('input', (e) => {
                        state.searchTerm = e.target.value.toLowerCase();
                        renderUsers();
                    });
                }

                // Form submission
                if (elements.assignForm) {
                    elements.assignForm.addEventListener('submit', handleFormSubmit);
                }

                // Modal events
                const modal = document.getElementById('assignTicketModal');
                if (modal) {
                    modal.addEventListener('show.bs.modal', () => {
                        state.searchTerm = '';
                        if (elements.userSearch) elements.userSearch.value = '';
                        renderUsers();
                    });
                }
            }

            // Load users from the server
            async function loadUsers() {
                try {
                    showLoading(true);
                    const response = await fetch('{{ path("user_list") }}', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        credentials: 'same-origin' // Important for sending cookies/session
                    });
                    
                    if (!response.ok) {
                        if (response.status === 403 || response.status === 401) {
                            throw new Error('No tiene permisos para ver la lista de usuarios');
                        }
                        throw new Error('No se pudo cargar la lista de usuarios');
                    }
                    
                    const data = await response.json();
                    
                    if (data.success && Array.isArray(data.users)) {
                        state.users = data.users;
                        renderUsers();
                    } else {
                        throw new Error('Formato de respuesta inválido');
                    }
                } catch (error) {
                    console.error('Error loading users:', error);
                    showError(error.message || 'Error al cargar los usuarios. Por favor, intente de nuevo.');
                } finally {
                    showLoading(false);
                }
            }

            // Render users based on search term
            function renderUsers() {
                if (!elements.userList) return;
                
                const filteredUsers = state.users.filter(user => 
                    (user.name && user.name.toLowerCase().includes(state.searchTerm)) || 
                    (user.username && user.username.toLowerCase().includes(state.searchTerm))
                );

                elements.userList.innerHTML = filteredUsers.length > 0
                    ? filteredUsers.map(user => renderUserItem(user)).join('')
                    : '<div class="text-center py-3 text-muted">No se encontraron usuarios</div>';

                // Add event listeners to checkboxes
                document.querySelectorAll('.user-checkbox').forEach(checkbox => {
                    checkbox.addEventListener('change', function() {
                        const userId = this.value;
                        const user = state.users.find(u => u.id.toString() === userId);
                        if (this.checked && user) {
                            state.selectedUsers.set(userId, user);
                        } else {
                            state.selectedUsers.delete(userId);
                        }
                        updateAssignButton();
                    });
                });
            }

            // Render a single user item
            function renderUserItem(user) {
                const isSelected = state.selectedUsers.has(user.id.toString());
                return `
                    <div class="list-group-item user-item" data-user-id="${user.id}">
                        <div class="form-check">
                            <input class="form-check-input user-checkbox" type="checkbox" 
                                   value="${user.id}" id="user-${user.id}" 
                                   ${isSelected ? 'checked' : ''}>
                            <label class="form-check-label w-100" for="user-${user.id}">
                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="fw-bold">${user.name || 'Usuario sin nombre'}</span>
                                    <span class="badge bg-${user.roles && user.roles.includes('ROLE_AUDITOR') ? 'info' : 'secondary'} ms-2">
                                        ${user.roles && user.roles.includes('ROLE_AUDITOR') ? 'Auditor' : 'Usuario'}
                                    </span>
                                </div>
                                ${user.username ? `<div class="text-muted small">@${user.username}</div>` : ''}
                            </label>
                        </div>
                    </div>`;
            }

            // Handle form submission
            function handleFormSubmit(event) {
                event.preventDefault();
                event.stopPropagation();
                
                try {
                    // Get selected users
                    const selectedUsers = [];
                    document.querySelectorAll('#userList input[type="checkbox"]:checked').forEach(checkbox => {
                        const userId = checkbox.value;
                        const userItem = checkbox.closest('.list-group-item');
                        const userName = userItem.querySelector('.fw-bold')?.textContent.trim() || 'Usuario sin nombre';
                        selectedUsers.push({ id: userId, name: userName });
                    });
                    
                    if (selectedUsers.length === 0) {
                        // Show error if no users selected
                        const errorDiv = document.getElementById('userSelectionError');
                        if (errorDiv) {
                            errorDiv.classList.remove('d-none');
                        }
                        return false;
                    }
                    
                    // Update the hidden input with selected user IDs
                    const assignedUsersInput = document.querySelector('input[name="ticket[assignedUsers]"]');
                    if (assignedUsersInput) {
                        assignedUsersInput.value = JSON.stringify(selectedUsers.map(user => user.id));
                    }
                    
                    // Update the state
                    state.selectedUsers = new Map(selectedUsers.map(user => [user.id, user]));
                    
                    // Update the UI to show selected users
                    const noUsersMessage = document.getElementById('noUsersMessage');
                    if (noUsersMessage) {
                        const userNames = selectedUsers.map(user => user.name).join(', ');
                        noUsersMessage.innerHTML = `
                            <div class="alert alert-success p-2 mb-0">
                                <i class="fas fa-check-circle me-2"></i>
                                <strong>Ticket asignado a:</strong> ${userNames}
                            </div>
                        `;
                    }
                    
                    // Close the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('assignTicketModal'));
                    if (modal) modal.hide();
                    
                    // Show success toast
                    const toastElement = document.getElementById('toastAssignmentSuccess');
                    const toastBody = toastElement.querySelector('.toast-body');
                    const countSpan = toastElement.querySelector('#assignedUsersCount');
                    
                    if (countSpan) {
                        countSpan.textContent = selectedUsers.length;
                    }
                    
                    const toast = new bootstrap.Toast(toastElement);
                    toast.show();
                    
                } catch (error) {
                    console.error('Error assigning users:', error);
                }
                
                return false;
            }
            
            // Add event listener to the form to handle user assignment
            document.addEventListener('DOMContentLoaded', function() {
                // Handle assign button click
                const assignButton = document.querySelector('#assignTicketForm button[type="submit"]');
                if (assignButton) {
                    assignButton.addEventListener('click', function(e) {
                        e.preventDefault();
                        
                        // Get selected users
                        const selectedUsers = [];
                        document.querySelectorAll('#userList input[type="checkbox"]:checked').forEach(checkbox => {
                            const userId = checkbox.value;
                            const userItem = checkbox.closest('.list-group-item');
                            const userName = userItem.querySelector('.fw-bold')?.textContent.trim() || 'Usuario sin nombre';
                            selectedUsers.push({ id: userId, name: userName });
                        });
                        
                        if (selectedUsers.length === 0) {
                            // Show error if no users selected
                            const errorDiv = document.getElementById('userSelectionError');
                            if (errorDiv) {
                                errorDiv.classList.remove('d-none');
                            }
                            return false;
                        }
                        
                        // Update the hidden input with selected user IDs
                        const assignedUsersInput = document.querySelector('input[name="ticket[assignedUsers]"]');
                        if (assignedUsersInput) {
                            assignedUsersInput.value = JSON.stringify(selectedUsers.map(user => user.id));
                        }
                        
                        // Update the UI to show selected users
                        const noUsersMessage = document.getElementById('noUsersMessage');
                        if (noUsersMessage) {
                            const userNames = selectedUsers.map(user => user.name).join(', ');
                            noUsersMessage.innerHTML = `
                                <div class="alert alert-success p-2 mb-0">
                                    <i class="fas fa-check-circle me-2"></i>
                                    <strong>Ticket asignado a:</strong> ${userNames}
                                </div>
                            `;
                        }
                        
                        // Close the modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('assignTicketModal'));
                        if (modal) modal.hide();
                        
                        // Show success toast
                        const toastElement = document.getElementById('toastAssignmentSuccess');
                        const countSpan = toastElement.querySelector('#assignedUsersCount');
                        if (countSpan) {
                            countSpan.textContent = selectedUsers.length;
                        }
                        const toast = new bootstrap.Toast(toastElement);
                        toast.show();
                        
                        return false;
                    });
                }
                
                // Initialize the form with empty state
                const noUsersMessage = document.getElementById('noUsersMessage');
                if (noUsersMessage) {
                    noUsersMessage.innerHTML = `
                        <div class="text-muted text-center py-3">
                            <i class="fas fa-user-plus fa-2x mb-2"></i>
                            <p class="mb-0">Selecciona usuarios para asignar al ticket</p>
                        </div>
                    `;
                }
            });

            // Load previously assigned users
            function loadAssignedUsers() {
                const assignedUsersInput = document.querySelector('input[name="ticket[assignedUsers]"]');
                if (!assignedUsersInput || !assignedUsersInput.value) return;
                
                try {
                    const userIds = JSON.parse(assignedUsersInput.value);
                    if (Array.isArray(userIds)) {
                        userIds.forEach(userId => {
                            const user = state.users.find(u => u.id.toString() === userId.toString());
                            if (user) {
                                state.selectedUsers.set(userId.toString(), user);
                            }
                        });
                        renderAssignedUsers();
                    }
                } catch (e) {
                    console.error('Error parsing assigned users:', e);
                }
            }

            // Render the list of assigned users
            function renderAssignedUsers() {
                if (!elements.assignedUsersList) return;
                
                if (state.selectedUsers.size === 0) {
                    elements.assignedUsersList.innerHTML = `
                        <div class="text-muted text-center py-3">
                            <i class="fas fa-user-plus fa-2x mb-2"></i>
                            <p class="mb-0">Asigna usuarios al ticket</p>
                        </div>`;
                    return;
                }
                
                elements.assignedUsersList.innerHTML = Array.from(state.selectedUsers.values())
                    .map(user => `
                        <div class="d-flex align-items-center mb-2 p-2 bg-light rounded">
                            <div class="flex-grow-1 ms-2">
                                <div class="d-flex justify-content-between">
                                    <span class="fw-medium">${user.name || 'Usuario sin nombre'}</span>
                                    <button type="button" class="btn-remove-user btn btn-sm btn-link text-danger" 
                                            data-user-id="${user.id}">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                ${user.username ? `<div class="text-muted small">@${user.username}</div>` : ''}
                            </div>
                        </div>`)
                    .join('');
                
                // Add event listeners to remove buttons
                elements.assignedUsersList.querySelectorAll('.btn-remove-user').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const userId = e.currentTarget.dataset.userId;
                        state.selectedUsers.delete(userId);
                        renderUsers();
                        renderAssignedUsers();
                        updateAssignButton();
                    });
                });
                
                updateAssignButton();
            }

            // Update the assign button state
            function updateAssignButton() {
                if (!elements.assignBtn) return;
                
                const countBadge = elements.assignBtn.querySelector('.badge');
                if (countBadge) {
                    countBadge.textContent = state.selectedUsers.size;
                    countBadge.classList.toggle('d-none', state.selectedUsers.size === 0);
                }
                
                elements.assignBtn.disabled = state.selectedUsers.size === 0;
            }

            // Show loading state
            function showLoading(show) {
                if (!elements.userList) return;
                
                if (show) {
                    elements.userList.innerHTML = `
                        <div class="text-center py-3">
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            Cargando usuarios...
                        </div>`;
                }
            }

            // Show error message
            function showError(message) {
                if (!elements.userList) return;
                elements.userList.innerHTML = `
                    <div class="alert alert-danger m-0">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        ${message}
                    </div>`;
            }

            // Show toast notification
            function showToast(message, type = 'success') {
                const toastContainer = document.createElement('div');
                toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
                toastContainer.style.zIndex = '1100';
                
                const toast = document.createElement('div');
                toast.className = `toast show align-items-center text-white bg-${type} border-0`;
                toast.role = 'alert';
                
                // Add appropriate icon based on message type
                let icon = 'check-circle';
                if (type === 'danger') icon = 'exclamation-circle';
                else if (type === 'warning') icon = 'exclamation-triangle';
                else if (type === 'info') icon = 'info-circle';
                
                toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body d-flex align-items-center">
                            <i class="fas fa-${icon} me-2"></i>
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>`;
                
                toastContainer.appendChild(toast);
                document.body.appendChild(toastContainer);
                
                // Auto-remove toast after 5 seconds
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => {
                        toastContainer.remove();
                    }, 300);
                }, 5000);
            }

            // Initialize Select2 for dropdowns
            $('select.select2-search').select2({
                theme: 'bootstrap-5',
                language: 'es',
                width: '100%',
                dropdownParent: $('form')
            });

            // Auto-resize textareas
            document.querySelectorAll('textarea').forEach(textarea => {
                textarea.addEventListener('input', function() {
                    this.style.height = 'auto';
                    this.style.height = (this.scrollHeight) + 'px';
                });
                textarea.style.height = 'auto';
                textarea.style.height = (textarea.scrollHeight) + 'px';
            });

            // Initialize the application
            init();
                $('#userSearch').val('').trigger('input');
            });

            // Quick filter buttons
            $('[data-filter]').on('click', function() {
                const filter = $(this).data('filter');
                $('[data-filter]').removeClass('bg-primary text-white');
                $(this).addClass('bg-primary text-white');

                // Apply filter
                if (filter === 'all') {
                    $('.user-item').show();
                } else if (filter === 'admin') {
                    $('.user-item').hide();
                    $('.user-item[data-role*="admin"]').show();
                } else if (filter === 'active') {
                    $('.user-item').hide();
                    $('.user-item[data-active="true"]').show();
                }

                // Update empty state
                checkEmptyState();
            });

            // Handle save button click
            $('#saveSelection').on('click', function() {
                updateSelectedUsers();
                $('#userSelectionModal').modal('hide');

                // Show success toast
                const toast = new bootstrap.Toast(document.getElementById('toastAssignmentSuccess'));
                toast.show();
            });

            // Handle clear selection
            $('#clearSelection').on('click', function() {
                $('.user-checkbox').prop('checked', false).trigger('change');
                selectedUsers.clear();
                updateSelectedUsersDisplay();
                updateSelectedCount();
            });

            // Clear search and reset filters when modal is hidden
            $('#userSelectionModal').on('hidden.bs.modal', function() {
                $('#userSearch').val('');
                $('[data-filter]').removeClass('bg-primary text-white');
                $('[data-filter="all"]').addClass('bg-primary text-white');
                filterUsers('');
            });
        });

        // Load users from API
        function loadUsers() {
            const userList = $('#userList');
            if (userList.length) {
                userList.html(`
                    <li class="list-group-item text-center text-muted py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                        <div class="mt-2">Cargando usuarios...</div>
                    </li>
                `);
            }

            // Get CSRF token from meta tag
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;

            // Prepare headers with CSRF token
            const headers = {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            };

            if (csrfToken) {
                headers['X-CSRF-Token'] = csrfToken;
            }

            fetch('/admin/api/users', {
                method: 'GET',
                headers: headers,
                credentials: 'same-origin'  // Important for sending cookies
            })
            .then(async response => {

                if (response.redirected) {
                    // If we're being redirected to login, show appropriate message
                    window.location.href = response.url;
                    throw new Error('Authentication required');
                }

                if (!response.ok) {
                    const error = await response.text();
                    throw new Error(`HTTP error! status: ${response.status}, ${error}`);
                }
                return response.json();
            })
            .then(users => {
                // if (!Array.isArray(users)) {
                //     throw new Error('Invalid response format: expected array');
                // }

                console.log('users', users);

                // if (!users) {

                // }
                allUsers = users.data;
                filterUsers('');
            })
            .catch(error => {

                console.error('Error loading users:', error);
                if (userList.length) {
                    if (error.message.includes('Authentication required')) {
                        userList.html(`
                            <li class="list-group-item text-center text-warning py-4">
                                <i class="fas fa-exclamation-circle me-2"></i>
                                Por favor, inicie sesión para continuar.
                            </li>
                        `);
                    } else {
                        userList.html(`
                            <li class="list-group-item text-center text-danger py-4">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Error al cargar los usuarios. Por favor, intente nuevamente.
                            </li>
                        `);
                    }
                }
            });
        }

        // Show error state in user list
        function showErrorState(message) {
            const userList = document.getElementById('userList');
            if (userList) {
                userList.innerHTML = `
                    <div class="alert alert-danger m-3">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        ${message || 'Error al cargar los usuarios. Por favor, intente nuevamente.'}
                    </div>`;
            }
        }

        // Show empty state
        function showEmptyState(show = true) {
            const emptyState = document.getElementById('emptyState');
            const loadingState = document.getElementById('loadingState');
            const userList = document.getElementById('userList');

            if (emptyState) emptyState.classList.toggle('d-none', !show);
            if (loadingState) loadingState.classList.add('d-none');
            if (userList) userList.style.display = show ? 'none' : 'block';
        }

        // Check if user list is empty and show appropriate state
        function checkEmptyState() {
            const hasVisibleUsers = $('.user-item:visible').length > 0;
            showEmptyState(!hasVisibleUsers);
        }

        // Update selected users count
        function updateSelectedCount() {
            const count = $('.user-checkbox:checked').length;
            $('#selectedCount').text(count);
        }

        // Filter users based on search term
        function filterUsers(searchTerm = '') {
            try {
                const userList = $('#userList');
                if (!userList.length) {
                    console.error('User list element not found');
                    return;
                }

                // Show loading state
                if (!searchTerm) {
                    userList.empty();
                    userList.append($('#loadingState').removeClass('d-none'));
                }

                // Ensure allUsers is an array
                const users = Array.isArray(allUsers) ? allUsers : [];
                const search = searchTerm.toLowerCase().trim();

                // Filter users safely
                const filteredUsers = users.filter(user => {
                    if (!user || !user.id) return false; // Skip invalid users

                    const fullName = (user.fullName || '').toLowerCase();
                    const email = (user.email || '').toLowerCase();
                    const username = (user.username || '').toLowerCase();

                    return !search ||
                           fullName.includes(search) ||
                           email.includes(search) ||
                           username.includes(search);
                });

                // If no users found, show empty state
                if (filteredUsers.length === 0) {
                    showEmptyState(true);
                    return;
                }

                // Clear and prepare user list
                userList.empty();
                showEmptyState(false);

                // Render user list
                filteredUsers.forEach(user => {
                    try {
                        const userId = user.id.toString();
                        const isSelected = selectedUsers.has(userId);
                        const fullName = user.fullName || 'Usuario sin nombre';
                        const email = user.email || '';
                        const role = user.roles && user.roles[0] ? user.roles[0].split('_').pop() : 'USER';
                        const isActive = user.isActive !== false;
                        const initials = fullName.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);

                        const userItem = $(`
                            <div class="list-group-item list-group-item-action p-3 user-item ${isSelected ? 'bg-light' : ''}"
                                 data-user-id="${userId}"
                                 data-role="${role.toLowerCase()}"
                                 data-active="${isActive}">
                                <div class="d-flex align-items-center">
                                    <div class="position-relative me-3">
                                        <div class="avatar avatar-lg rounded-circle bg-primary bg-opacity-10 text-primary d-flex align-items-center justify-content-center"
                                             style="width: 48px; height: 48px;">
                                            ${initials}
                                        </div>
                                        ${isActive ? `
                                            <span class="position-absolute bottom-0 end-0 bg-success rounded-circle border border-2 border-white"
                                                  style="width: 12px; height: 12px;"></span>
                                        ` : ''}
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0 fw-bold">${fullName}</h6>
                                            <span class="badge bg-${role === 'ADMIN' ? 'danger' : 'primary'} bg-opacity-10 text-${role === 'ADMIN' ? 'danger' : 'primary'} small">
                                                ${role}
                                            </span>
                                        </div>
                                        ${email ? `<div class="text-muted small">${email}</div>` : ''}
                                    </div>
                                    <div class="form-check form-switch ms-3">
                                        <input class="form-check-input user-checkbox"
                                               type="checkbox"
                                               role="switch"
                                               value="${userId}"
                                               id="user-${userId}"
                                               ${isSelected ? 'checked' : ''}>
                                    </div>
                                </div>
                            </div>
                        `);

                        userList.append(userItem);

                        // Add click handler for the entire user item
                        userItem.on('click', function(e) {
                            if (!$(e.target).is('input, a, button, .btn, [data-bs-toggle]')) {
                                const checkbox = $(this).find('.user-checkbox');
                                checkbox.prop('checked', !checkbox.prop('checked')).trigger('change');
                            }
                        });

                        // Add change handler for the checkbox
                        userItem.find('.user-checkbox').on('change', function() {
                            const userId = $(this).val();
                            const userItem = $(this).closest('.user-item');

                            if ($(this).is(':checked')) {
                                selectedUsers.add(userId);
                                userItem.addClass('bg-light');
                            } else {
                                selectedUsers.delete(userId);
                                userItem.removeClass('bg-light');
                            }

                            updateSelectedCount();
                            updateSelectedUsersDisplay();
                        });

                    } catch (userError) {
                        console.error('Error rendering user:', user, userError);
                    }
                });

                // Update selected count
                updateSelectedCount();
                checkEmptyState();

            } catch (error) {
                console.error('Error in filterUsers:', error);
                const userList = document.getElementById('userList');
                if (userList) {
                    userList.innerHTML = `
                        <div class="alert alert-danger m-3">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Error al filtrar usuarios. Por favor, intente nuevamente.
                        </div>`;
                }
            }
        }

        // Update selected users
        function updateSelectedUsers() {
            selectedUsers.clear();
            $('.user-checkbox:checked').each(function() {
                selectedUsers.add($(this).val());
            });

            // Update hidden input
            $('#{{ form.assignedUsers.vars.id }}').val(Array.from(selectedUsers).join(','));

            // Update selected users display
            updateSelectedUsersDisplay();
        }

        // Update the selected users display
        function updateSelectedUsersDisplay() {
            const selectedUsersContainer = $('#selectedUsers');
            selectedUsersContainer.empty();

            if (selectedUsers.size === 0) {
                selectedUsersContainer.html('<span class="text-muted small">Ningún usuario seleccionado</span>');
                return;
            }

            selectedUsers.forEach(userId => {
                const user = allUsers.find(u => u.id.toString() === userId);
                if (user) {
                    selectedUsersContainer.append(`
                        <span class="badge bg-primary p-2">
                            ${user.fullName}
                            <button type="button" class="btn-close btn-close-white btn-sm ms-1"
                                    onclick="removeUser('${userId}')"
                                    style="font-size: 0.5rem;"></button>
                        </span>
                    `);
                }
            });
        }

        // Remove a user from selection
        function removeUser(userId) {
            selectedUsers.delete(userId);
            $('#{{ form.assignedUsers.vars.id }}').val(Array.from(selectedUsers).join(','));
            updateSelectedUsersDisplay();

            // Also uncheck in the modal
            $(`#user-${userId}`).prop('checked', false);
        }

        // Initialize display
        $(document).ready(function() {
            updateSelectedUsersDisplay();
        });
    </script>
    <script>
        // Auto-resize textarea
        function autoResizeTextarea(element) {
            element.style.height = 'auto';
            element.style.height = (element.scrollHeight) + 'px';
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Select2 for area of origin with improved search
            $('select.select2-search').select2({
                theme: 'bootstrap-5',
                language: 'es',
                matcher: function(params, data) {
                    // If there are no search terms, return all of the data
                    if ($.trim(params.term) === '') {
                        return data;
                    }

                    // Do not display the item if there is no 'text' property
                    if (typeof data.text === 'undefined') {
                        return null;
                    }

                    // Split the search term and get the last part (in case of grouped searches)
                    const searchTerm = params.term.toLowerCase();
                    const text = data.text.toLowerCase();
                    
                    // Check if the text contains the search term
                    if (text.indexOf(searchTerm) > -1) {
                        return data;
                    }

                    // Check if this is an option inside an optgroup
                    if (data.element && data.element.parentElement) {
                        const groupText = data.element.parentElement.getAttribute('label');
                        if (groupText && groupText.toLowerCase().indexOf(searchTerm) > -1) {
                            return data;
                        }
                    }

                    return null;
                },
                templateResult: function(data) {
                    // Show the option normally if it's selected or if there's no search term
                    if (data.selected || !$('.select2-search__field').val()) {
                        return data.text;
                    }
                    
                    // Highlight matching text in the results
                    const searchTerm = $('.select2-search__field').val().toLowerCase();
                    const text = data.text;
                    const index = text.toLowerCase().indexOf(searchTerm);
                    
                    if (index >= 0) {
                        const before = text.substring(0, index);
                        const match = text.substring(index, index + searchTerm.length);
                        const after = text.substring(index + searchTerm.length);
                        return $('<span>').html(before + '<span class="bg-warning text-dark">' + match + '</span>' + after);
                    }
                    
                    return text;
                },
                width: '100%',
                placeholder: 'Buscar área de origen...',
                allowClear: true,
                dropdownAutoWidth: true,
                dropdownParent: $('#assignTicketModal').length ? $('#assignTicketModal') : $(document.body)
            });
            
            // Initialize textarea height
            const textarea = document.querySelector('textarea[name*="[title]"]');
            if (textarea) {
                autoResizeTextarea(textarea);
                textarea.addEventListener('input', function() {
                    autoResizeTextarea(this);
                });
            }

            // User selection modal functionality
            const userModal = new bootstrap.Modal(document.getElementById('userSelectionModal'));
            const assignBtn = document.getElementById('asignarBtn');
            const userList = document.getElementById('userList');
            const userSearch = document.getElementById('userSearch');
            const selectedUsersContainer = document.getElementById('selectedUsers');
            const selectedCount = document.getElementById('selectedCount');
            const clearSelectionBtn = document.getElementById('clearSelection');
            const confirmBtn = document.getElementById('confirmAssignment');
            const assignedUsersInput = document.getElementById('{{ form.assignedUsers.vars.id|e('js') }}');

            let allUsers = [];
            let selectedUsers = new Map();

            // Show modal when Assign button is clicked
            if (assignBtn) {
                assignBtn.addEventListener('click', function() {
                    loadUsers();
                    if (userModal) {
                        userModal.show();
                    }
                });
            }

            // Load users from API
            async function loadUsers() {
                if (!userList) return;

                try {
                    userList.innerHTML = `
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                            <p class="mt-2 mb-0">Cargando usuarios...</p>
                        </div>`;

                    const response = await fetch('/admin/api/users');
                    if (!response.ok) throw new Error('Error al cargar usuarios');

                    allUsers = await response.json();
                    renderUserList(allUsers);

                } catch (error) {
                    console.error('Error loading users:', error);
                    if (userList) {
                        userList.innerHTML = `
                            <div class="alert alert-danger m-3">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                No se pudieron cargar los usuarios. Por favor, intente nuevamente.
                            </div>`;
                    }
                }
            }

            // Render user list in the modal
            function renderUserList(usersToShow) {
                if (!userList) return;

                if (!usersToShow || usersToShow.length === 0) {
                    userList.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-user-slash text-muted mb-2" style="font-size: 2rem;"></i>
                            <p class="mb-0">No se encontraron usuarios</p>
                        </div>`;
                    return;
                }

                userList.innerHTML = '';

                usersToShow.forEach(user => {
                    const isSelected = selectedUsers.has(user.id.toString());
                    const userElement = document.createElement('div');
                    userElement.className = `list-group-item list-group-item-action d-flex align-items-center ${isSelected ? 'active' : ''}`;
                    userElement.innerHTML = `
                        <div class="form-check flex-grow-1">
                            <input class="form-check-input" type="checkbox"
                                   id="user-${user.id}"
                                   value="${user.id}"
                                   ${isSelected ? 'checked' : ''}
                                   onchange="toggleUserSelection(${user.id}, this.checked)">
                            <label class="form-check-label ms-2" for="user-${user.id}">
                                <div class="d-flex align-items-center">
                                    <div class="me-2">
                                        <span class="avatar avatar-sm rounded-circle bg-primary text-white d-flex align-items-center justify-content-center" style="width: 32px; height: 32px;">
                                            ${user.name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2)}
                                        </span>
                                    </div>
                                    <div>
                                        <div class="fw-medium">${user.name}</div>
                                        <div class="small text-muted">@${user.username}</div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <div class="badge bg-primary bg-opacity-10 text-primary">
                            ${user.roles[0].split('_').pop().toLowerCase()}
                        </div>`;

                    userList.appendChild(userElement);
                });

                updateSelectedUsersUI();
            }

            // Toggle user selection
            window.toggleUserSelection = function(userId, isSelected) {
                const user = allUsers.find(u => u.id == userId);
                if (!user) return;

                if (isSelected) {
                    selectedUsers.set(userId.toString(), user);
                } else {
                    selectedUsers.delete(userId.toString());
                }
                updateSelectedUsersUI();
            };

            // Update selected users UI
            function updateSelectedUsersUI() {
                if (!selectedCount || !selectedUsersContainer) return;

                selectedCount.textContent = selectedUsers.size;
                selectedUsersContainer.innerHTML = '';

                if (selectedUsers.size === 0) {
                    selectedUsersContainer.innerHTML = '<div class="text-muted small">Ningún usuario seleccionado</div>';
                    updateAssignedUsersInput();
                    return;
                }

                // Create badges for selected users
                selectedUsers.forEach((user, userId) => {
                    const badge = document.createElement('span');
                    badge.className = 'badge bg-primary d-flex align-items-center me-2 mb-2';
                    badge.innerHTML = `
                        ${user.name}
                        <button type="button" class="btn-close btn-close-white btn-close-sm ms-2"
                                data-user-id="${userId}"
                                aria-label="Remover"></button>
                    `;

                    // Add remove handler
                    const removeBtn = badge.querySelector('.btn-close');
                    if (removeBtn) {
                        removeBtn.addEventListener('click', function(e) {
                            e.stopPropagation();
                            selectedUsers.delete(userId);
                            updateSelectedUsersUI();
                            renderUserList(allUsers);
                        });
                    }

                    selectedUsersContainer.appendChild(badge);
                });

                // Update hidden input
                updateAssignedUsersInput();
            }

                    assignedUsersInput.value = JSON.stringify(Array.from(selectedUsers.keys()));
                }
            }

            // Search functionality
            if (userSearch) {
                userSearch.addEventListener('input', function(e) {
                    const searchTerm = e.target.value.toLowerCase().trim();
                    if (!searchTerm) {
                        renderUserList(allUsers);
                        return;
                    }

                    const filtered = allUsers.filter(user =>
                        user.name.toLowerCase().includes(searchTerm) ||
                        (user.username && user.username.toLowerCase().includes(searchTerm))
                    );
                    renderUserList(filtered);
                });
            }

            // Clear search when modal is hidden
            if (userModal && userModal._element) {
                userModal._element.addEventListener('hidden.bs.modal', function () {
                    if (userSearch) userSearch.value = '';
                    renderUserList(allUsers);
                });
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Select2 for multiple user selection
            $('.select2-multiple').select2({
                theme: 'bootstrap-5',
                language: 'es',
                placeholder: 'Seleccione uno o más usuarios',
                allowClear: true,
                width: '100%',
                closeOnSelect: false,
                templateResult: function(data) {
                    if (!data.id) { return data.text; }
                    return $('<span>').text(data.text).addClass('text-truncate d-inline-block');
                }
            });

            // Update current time every second
            function updateCurrentTime() {
                const timeElement = document.getElementById('fecha-actual');
                if (!timeElement) return;

                const now = new Date();
                const options = {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false,
                    timeZone: 'America/Argentina/Buenos_Aires'
                };

                try {
                    const formatter = new Intl.DateTimeFormat('es-AR', options);
                    timeElement.textContent = formatter.format(now);
                } catch (e) {
                    console.error('Error formatting date:', e);
                    timeElement.textContent = now.toLocaleString('es-AR');
                }
            }

            // Initialize the time and update every second
            updateCurrentTime();
            setInterval(updateCurrentTime, 60000); // Update every minute

            // Make sure the function is available globally
            window.updateCurrentTime = updateCurrentTime;

            // Client-side form validation
            const forms = document.querySelectorAll('.needs-validation');

            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }

                    form.classList.add('was-validated');
                }, false);

                // Auto-resize textarea
                const textarea = form.querySelector('textarea');
                if (textarea) {
                    textarea.addEventListener('input', function() {
                        this.style.height = 'auto';
                        this.style.height = (this.scrollHeight) + 'px';
                    });
                }
            });

            // Focus on the title field when the page loads
            const titleField = document.querySelector('input[name*="[title]"]');
            if (titleField) {
                titleField.focus();
            }
        });
    </script>
{% endblock %}
