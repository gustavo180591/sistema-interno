{% extends 'base.html.twig' %}

{% block title %}Gestión de Áreas de Origen{% endblock %}

{% block body %}
<div class="container-fluid px-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center mb-4">
        <div class="mb-3 mb-md-0">
            <h1 class="h3 mb-2">
                <i class="bi bi-diagram-3 me-2"></i>Áreas de Origen
            </h1>
            <p class="text-muted mb-0">Administre las áreas de origen de los tickets</p>
        </div>
        <div>
            <a href="{{ path('admin_area_new') }}" class="btn btn-primary">
                <i class="bi bi-plus-circle me-2"></i>Nueva Área
            </a>
        </div>
    </div>

    {% for message in app.flashes('success') %}
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle me-2"></i>{{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}

    {% for message in app.flashes('error') %}
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>{{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}

    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body">
            <form id="searchForm" method="get" action="{{ path('admin_area_index') }}" class="row g-3 align-items-end">
                <div class="col-md-6">
                    <label for="search" class="form-label">Buscar</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" 
                               class="form-control" 
                               id="search" 
                               name="search" 
                               value="{{ search|default('') }}" 
                               placeholder="Buscar por nombre o descripción..."
                               autocomplete="off">
                    </div>
                </div>
                <div class="col-md-6">
                    <label for="estado" class="form-label">Estado</label>
                    <select class="form-select" id="estado" name="estado">
                        <option value="">Todos</option>
                        <option value="true" {{ estado == 'true' ? 'selected' : '' }}>Activo</option>
                        <option value="false" {{ estado == 'false' ? 'selected' : '' }}>Inactivo</option>
                    </select>
                </div>
                {% if search or estado is not null %}
                <div class="col-12">
                    <a href="{{ path('admin_area_index') }}" class="text-decoration-none small">
                        <i class="bi bi-x-circle me-1"></i> Limpiar filtros
                    </a>
                </div>
                {% endif %}
            </form>
        </div>
    </div>

    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            {% include 'admin/area/_table.html.twig' %}
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    // Inicializar tooltips
    document.addEventListener('DOMContentLoaded', function() {
        // Inicializar tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Variables para el debounce
        let searchTimeout;
        const searchInput = document.getElementById('search');
        const estadoSelect = document.getElementById('estado');
        const searchForm = document.getElementById('searchForm');
        
        // Función para actualizar la URL sin recargar la página
        function updateURL(params) {
            const url = new URL(window.location.href.split('?')[0]);
            Object.keys(params).forEach(key => {
                if (params[key] !== '') {
                    url.searchParams.set(key, params[key]);
                } else {
                    url.searchParams.delete(key);
                }
            });
            
            // Actualizar la URL sin recargar la página
            window.history.pushState({}, '', url);
            
            // Realizar la búsqueda
            fetchAreas(params.search || '', params.estado || '');
        }
        
        // Función para buscar áreas mediante AJAX
        function fetchAreas(search, estado) {
            const url = new URL('{{ path('admin_area_index') }}', window.location.origin);
            if (search) url.searchParams.append('search', search);
            if (estado) url.searchParams.append('estado', estado);
            
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const newTable = doc.querySelector('.table-responsive');
                if (newTable) {
                    document.querySelector('.table-responsive').innerHTML = newTable.innerHTML;
                }
            })
            .catch(error => console.error('Error:', error));
        }
        
        // Evento de entrada en el campo de búsqueda
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                updateURL({
                    search: this.value,
                    estado: estadoSelect.value
                });
            }, 300); // 300ms de retraso
        });
        
        // Evento de cambio en el selector de estado
        estadoSelect.addEventListener('change', function() {
            updateURL({
                search: searchInput.value,
                estado: this.value
            });
        });
        
        // Prevenir el envío del formulario por defecto
        searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            // No es necesario hacer nada aquí ya que los cambios se manejan con los eventos individuales
        });
    });
</script>
{% endblock %}
