{% extends 'base.html.twig' %}

{% block title %}Rendimiento de {{ user.nombre }} {{ user.apellido }}{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/apexcharts@3.35.0/dist/apexcharts.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Task Status Chart
            if (document.getElementById('taskStatusChart') && {{ status_distribution is defined ? 'true' : 'false' }}) {
                const statusData = {{ status_distribution|json_encode|raw }};
                
                // Function to update chart type
                function updateChartType(chart, type) {
                    if (type === 'donut') {
                        chart.updateOptions({
                            chart: { type: 'donut' },
                            plotOptions: {
                                pie: {
                                    donut: {
                                        size: '65%',
                                        labels: {
                                            show: true,
                                            total: {
                                                show: true,
                                                label: 'Total',
                                                formatter: function(w) {
                                                    return w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            dataLabels: { enabled: false },
                            legend: {
                                position: 'right',
                                labels: { colors: '#6c757d' }
                            },
                            xaxis: { type: 'category' },
                            yaxis: { show: false },
                            grid: { padding: { top: 0, right: 0, bottom: 0, left: 0 } }
                        }, false, false, true);
                    } else {
                        chart.updateOptions({
                            chart: { type: 'bar' },
                            plotOptions: {
                                bar: {
                                    borderRadius: 8,
                                    horizontal: false,
                                    columnWidth: '45%',
                                    dataLabels: { position: 'top' }
                                }
                            },
                            dataLabels: {
                                enabled: true,
                                formatter: function(val) { return val > 0 ? val : ''; },
                                offsetY: -20,
                                style: { fontSize: '12px', colors: ['#6c757d'] }
                            },
                            legend: { show: false },
                            xaxis: { 
                                categories: statusData.labels,
                                labels: { style: { fontSize: '12px', fontWeight: 600 } }
                            },
                            yaxis: { 
                                labels: { 
                                    formatter: function(val) { return Math.floor(val) === val ? val : ''; },
                                    style: { colors: ['#6c757d'], fontSize: '12px' }
                                }
                            },
                            grid: { 
                                borderColor: '#f8f9fa',
                                strokeDashArray: 5,
                                padding: { top: 0, right: 30, bottom: 0, left: 30 }
                            },
                            fill: {
                                type: 'gradient',
                                gradient: {
                                    shade: 'light',
                                    type: 'vertical',
                                    shadeIntensity: 0.35,
                                    opacityFrom: 0.9,
                                    opacityTo: 0.65,
                                    stops: [0, 60, 100]
                                }
                            },
                            states: {
                                hover: { filter: { type: 'darken', value: 0.9 } },
                                active: { filter: { type: 'none' } }
                            }
                        }, false, false, true);
                    }
                }

                // Initialize chart with donut as default
                const options = {
                    series: statusData.data,
                    chart: {
                        type: 'donut',
                        height: 360,
                        fontFamily: 'Nunito, sans-serif',
                        toolbar: {
                            show: true,
                            tools: {
                                download: true,
                                selection: false,
                                zoom: false,
                                zoomin: false,
                                zoomout: false,
                                pan: false,
                                reset: false
                            }
                        },
                        dropShadow: {
                            enabled: true,
                            top: 2,
                            left: 2,
                            blur: 4,
                            color: '#000',
                            opacity: 0.08
                        },
                        animations: {
                            enabled: true,
                            easing: 'easeinout',
                            speed: 900,
                            animateGradually: { enabled: true, delay: 150 },
                            dynamicAnimation: { enabled: true, speed: 350 }
                        },
                        events: {
                            mounted: function(chartContext, config) {
                                updateLegend(chartContext, config);
                            },
                            updated: function(chartContext, config) {
                                updateLegend(chartContext, config);
                            }
                        }
                    },
                    colors: statusData.colors.length ? statusData.colors : ['#4e79a7','#59a14f','#f28e2b','#e15759','#76b7b2','#edc948','#af7aa1','#ff9da7'],
                    labels: statusData.labels,
                    dataLabels: { enabled: false },
                    legend: {
                        position: 'right',
                        offsetY: 0,
                        height: 230,
                        formatter: function(seriesName, opts) {
                            return [
                                seriesName,
                                ' - ',
                                opts.w.globals.series[opts.seriesIndex],
                                ' (' + opts.w.globals.seriesPercent[opts.seriesIndex].toFixed(1) + '%)'
                            ].join('');
                        }
                    },
                    plotOptions: {
                        pie: {
                            donut: {
                                size: '68%',
                                labels: {
                                    show: true,
                                    name: {
                                        show: true,
                                        fontSize: '14px',
                                        fontFamily: 'Nunito, sans-serif',
                                        color: '#6c757d',
                                        offsetY: 10
                                    },
                                    value: {
                                        show: true,
                                        fontSize: '26px',
                                        fontFamily: 'Nunito, sans-serif',
                                        color: '#4e73df',
                                        offsetY: -10,
                                        formatter: function (val) { return val; }
                                    },
                                    total: {
                                        show: true,
                                        showAlways: true,
                                        label: 'Total',
                                        color: '#6c757d',
                                        formatter: function (w) {
                                            return w.globals.seriesTotals.reduce((a, b) => a + b, 0);
                                        }
                                    }
                                }
                            }
                        }
                    },
                    stroke: { show: true, width: 1, colors: ['#fff'] },
                    tooltip: {
                        fillSeriesColor: false,
                        y: {
                            formatter: function(val) { return val + ' tarea' + (val !== 1 ? 's' : ''); },
                            title: { formatter: function(seriesName) { return seriesName + ':'; } }
                        }
                    },
                    responsive: [{
                        breakpoint: 768,
                        options: {
                            chart: { height: 320 },
                            legend: { position: 'bottom' }
                        }
                    }]
                };

                // Function to update legend
                function updateLegend(chartContext, config) {
                    const legendContainer = document.querySelector('#taskStatusChart + .chart-legend');
                    const total = config.config.series.reduce((a, b) => a + b, 0);
                    
                    if (total > 0) {
                        let legendHtml = '<div class="d-flex flex-wrap justify-content-center gap-3">';
                        
                        config.config.labels.forEach((label, index) => {
                            const value = config.config.series[index];
                            if (value > 0) {
                                const percentage = ((value / total) * 100).toFixed(1);
                                legendHtml += `
                                    <div class="legend-item">
                                        <span class="legend-color" style="background-color: ${config.config.colors[index]};"></span>
                                        <span class="me-2 fw-medium">${label}:</span>
                                        <span class="text-muted">${value} (${percentage}%)</span>
                                    </div>
                                `;
                            }
                        });
                        
                        legendHtml += '</div>';
                        legendContainer.innerHTML = legendHtml;
                    } else {
                        legendContainer.innerHTML = '<p class="text-muted text-center mb-0">No hay datos disponibles para el período seleccionado</p>';
                    }
                }

                // Initialize chart
                const chart = new ApexCharts(document.querySelector("#taskStatusChart"), options);
                chart.render();

                // Add event listeners for chart type buttons
                document.querySelectorAll('.chart-type-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        document.querySelectorAll('.chart-type-btn').forEach(b => b.classList.remove('active'));
                        this.classList.add('active');
                        updateChartType(chart, this.dataset.type);
                    });
                });
            }

            // Initialize Ticket Status Chart (from userTickets metrics)
            if (document.getElementById('ticketStatusChart') && {{ userTickets is defined ? 'true' : 'false' }}) {
                const tkCompletedPeriod = {{ userTickets.ticketsCompleted|default(0) }};
                const tkOpenCurrent = {{ userTickets.openAssigned|default(0) }};
                const tkData = {
                    labels: ['Completados (período)', 'Abiertos (actuales)'],
                    data: [tkCompletedPeriod, tkOpenCurrent],
                    colors: ['#198754', '#0d6efd']
                };

                const totalTk = tkData.data.reduce((a,b)=>a+b,0);
                const optionsTk = {
                    series: tkData.data,
                    chart: {
                        type: 'donut',
                        height: 280,
                        fontFamily: 'Nunito, sans-serif',
                        animations: { enabled: true }
                    },
                    labels: tkData.labels,
                    colors: tkData.colors,
                    dataLabels: { enabled: false },
                    legend: { position: 'bottom' },
                    plotOptions: {
                        pie: {
                            donut: {
                                size: '70%',
                                labels: {
                                    show: true,
                                    total: {
                                        show: true,
                                        label: 'Total',
                                        formatter: function() { return totalTk; }
                                    }
                                }
                            }
                        }
                    },
                    tooltip: { y: { formatter: (v)=> v + ' ticket' + (v!==1?'s':'') } }
                };

                const chartTk = new ApexCharts(document.querySelector('#ticketStatusChart'), optionsTk);
                chartTk.render();
            }
        });
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .kpi-card { transition: all 0.3s ease; }
        .kpi-card:hover { transform: translateY(-3px); box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15); }
        .kpi-value { font-size: 1.5rem; font-weight: 600; }
        .kpi-label { font-size: 0.875rem; color: #6c757d; }
        .status-badge { font-size: 0.75rem; padding: 0.35em 0.65em; }
        .table th { font-weight: 600; }
        .chart-container { min-height: 300px; }
        .chart-legend { margin-top: 1rem; }
        .chart-legend .legend-item {
            display: inline-flex;
            align-items: center;
            margin-right: 1rem;
            margin-bottom: 0.5rem;
        }
        .chart-legend .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 3px;
            margin-right: 0.5rem;
        }
    </style>
{% endblock %}

{% block body %}
<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="h4 mb-0">
        <a href="{{ path('admin_admin_performance_dashboard') }}" class="text-decoration-none text-muted me-2">
            <i class="fas fa-arrow-left"></i>
        </a>
        Rendimiento de {{ user.nombre }} {{ user.apellido }}
    </h1>
    <a href="{{ path('admin_admin_performance_dashboard') }}" class="btn btn-outline-secondary">
        <i class="fas fa-arrow-left me-1"></i> Volver al Resumen
    </a>
</div>

<div class="card mb-4">
    <div class="card-body">
        <form method="get" class="row g-3 align-items-end">
            <input type="hidden" name="id" value="{{ user.id }}">
            <div class="col-md-4">
                <label class="form-label fw-bold">Desde</label>
                <input type="date" class="form-control" name="from" value="{{ from|date('Y-m-d') }}" required>
            </div>
            <div class="col-md-4">
                <label class="form-label fw-bold">Hasta</label>
                <input type="date" class="form-control" name="to" value="{{ to|date('Y-m-d') }}" required>
            </div>
            <div class="col-md-2">
                <button type="submit" class="btn btn-primary w-100">
                    <i class="fas fa-filter me-1"></i>Filtrar
                </button>
            </div>
            <div class="col-md-2">
                <a href="{{ path('admin_admin_performance_performance_user', {'id': user.id}) }}" class="btn btn-outline-secondary w-100">
                    <i class="fas fa-sync-alt me-1"></i>Restablecer
                </a>
            </div>
        </form>
    </div>
</div>

<!-- KPI Cards -->
<div class="row g-3 mb-4">
    <div class="col-md-4">
        <div class="card kpi-card h-100 border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="text-muted small">Tickets cerrados (período)</div>
                <div class="display-6">{{ userTickets.ticketsCompleted|default(0) }}</div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card kpi-card h-100 border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="text-muted small">TMR (horas)</div>
                {% set tmrMin = userTickets.ticketAvgResolutionMin|default(0) %}
                <div class="display-6">{{ (tmrMin / 60)|number_format(1, '.', ',') }}</div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card kpi-card h-100 border-0 shadow-sm">
            <div class="card-body text-center">
                <div class="text-muted small">Tickets asignados (período)</div>
                {% set tkAssigned = userTickets.ticketsAssigned|default(0) %}
                {% set tkCompleted = userTickets.ticketsCompleted|default(0) %}
                {% set tkInProcess = tkAssigned - tkCompleted %}
                <div class="display-6">{{ tkAssigned }}</div>
                <div class="small text-muted">En proceso (período): {{ tkInProcess > 0 ? tkInProcess : 0 }}</div>
            </div>
        </div>
    </div>
</div>

<!-- Score -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body">
        <h6 class="mb-3">Score</h6>
        {% if performance is defined and performance.score is defined %}
            {% set s = performance.score %}
            <div class="d-flex align-items-center gap-3">
                <div class="progress flex-grow-1" style="height:10px;">
                    <div class="progress-bar bg-{{ s.final > 80 ? 'success' : (s.final > 60 ? 'warning' : 'danger') }}" style="width: {{ s.final }}%"></div>
                </div>
                <span class="badge bg-{{ s.final > 80 ? 'success' : (s.final > 60 ? 'warning' : 'danger') }}">
                    {{ s.final|number_format(1) }}
                </span>
            </div>
            <div class="text-muted small mt-2">
                Prod {{ s.prod }} · Cal {{ s.calidad }} · Col {{ s.colaboracion }}
            </div>
        {% else %}
            <div class="text-muted">Sin datos de score para el período seleccionado</div>
        {% endif %}
    </div>
</div>

<!-- Tickets Detail -->
<div class="card border-0 shadow-sm mb-4">
    <div class="card-header bg-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="fas fa-ticket-alt me-2 text-primary"></i>
            Detalle de Tickets Completados (período) ({{ userTicketsDetail|length|default(0) }})
        </h5>
    </div>
    <div class="table-responsive">
        <table class="table table-hover align-middle mb-0">
            <thead class="table-light">
                <tr>
                    <th>ID Ext.</th>
                    <th>Área de origen</th>
                    <th class="text-center">Creación</th>
                    <th class="text-center">Completado</th>
                    <th class="text-center">Asignados</th>
                    <th class="text-center">Resolución</th>
                </tr>
            </thead>
            <tbody>
                {% if userTicketsDetail is defined and userTicketsDetail|length > 0 %}
                    {% for tk in userTicketsDetail %}
                        <tr>
                            <td>{{ tk.externo ?? '-' }}</td>
                            <td>{{ tk.areaOrigen ?? '-' }}</td>
                            <td class="text-center text-nowrap">
                                <div>{{ tk.createdAt|date('d/m/Y') }}</div>
                                <small class="text-muted">{{ tk.createdAt|date('H:i') }}</small>
                            </td>
                            <td class="text-center text-nowrap">
                                <div>{{ tk.completadoEl|date('d/m/Y') }}</div>
                                <small class="text-muted">{{ tk.completadoEl|date('H:i') }}</small>
                            </td>
                            <td class="text-center">
                                {% if tk.asignados|length > 0 %}
                                    <span class="text-muted small">{{ tk.asignados|join(', ') }}</span>
                                {% else %}-{% endif %}
                            </td>
                            <td class="text-center fw-medium">
                                {% set rmin = tk.resolucionMin|default(0) %}
                                {% set rh = (rmin / 60)|round(0, 'floor') %}
                                {% set rm = (rmin - (rh * 60))|round(0, 'floor') %}
                                {{ rh }}h {{ rm }}m
                            </td>
                        </tr>
                    {% endfor %}
                {% else %}
                    <tr>
                        <td colspan="6" class="text-center py-5 text-muted">
                            <div class="mb-2">
                                <i class="fas fa-inbox fa-3x opacity-25 mb-3"></i>
                            </div>
                            <h6 class="mb-1">No hay tickets completados en el período</h6>
                            <p class="small mb-0">Ajustá el rango de fechas para ver resultados.</p>
                        </td>
                    </tr>
                {% endif %}
            </tbody>
        </table>
    </div>
</div>

<!-- Tickets Distribution -->
<div class="card mb-4">
    <div class="card-header bg-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="fas fa-chart-pie me-2 text-primary"></i>
            Distribución de Tickets (período vs actuales)
        </h5>
    </div>
    <div class="card-body">
        <div id="ticketStatusChart" class="chart-container"></div>
        <div class="text-muted small mt-2">
            {% if userTickets is defined %}
                {% set tkAssigned = userTickets.ticketsAssigned|default(0) %}
                {% set tkCompleted = userTickets.ticketsCompleted|default(0) %}
                {% set tkInProcess = tkAssigned - tkCompleted %}
                Completados (período): {{ tkCompleted }} · En proceso (período): {{ tkInProcess > 0 ? tkInProcess : 0 }} · Abiertos (actuales): {{ userTickets.openAssigned|default(0) }} · Asignados (período): {{ tkAssigned }}
            {% else %}
                No hay datos disponibles para este período.
            {% endif %}
        </div>
    </div>
</div>


<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4 text-center">
                <div class="h5 text-muted mb-1">Tareas Completadas</div>
                {% set tasksCompleted = detail|filter(t => t.status == 'completed')|length %}
                {% set tasksCompletedFromTicket = detail|filter(t => t.status == 'completed' and t.fromTicket)|length %}
                {% set tasksCompletedAutonomous = tasksCompleted - tasksCompletedFromTicket %}
                {% set ticketsCompleted = userTickets.ticketsCompleted|default(0) %}
                <div class="h3">{{ (tasksCompleted + ticketsCompleted) }}</div>
                <div class="small text-muted">
                    Tareas: {{ tasksCompleted }} (de Ticket: {{ tasksCompletedFromTicket }} · Autónomas: {{ tasksCompletedAutonomous }}) · Tickets: {{ ticketsCompleted }}
                </div>
            </div>
            <div class="col-md-4 text-center">
                <div class="h5 text-muted mb-1">Tiempo Promedio</div>
                <div class="h3">
                    {% set completedTasks = detail|filter(t => t.status == 'completed' and t.durationMin is not null) %}
                    {% if completedTasks|length > 0 %}
                        {% set avgTaskMin = (completedTasks|reduce((sum, t) => sum + t.durationMin, 0) / completedTasks|length) %}
                        {{ avgTaskMin|number_format(1, ',', '.') }} min (tareas)
                    {% elseif userTickets.ticketsCompleted|default(0) > 0 %}
                        {% set tAvgMin = userTickets.ticketAvgResolutionMin|default(0) %}
                        {% set tH = (tAvgMin / 60)|round(0, 'floor') %}
                        {% set tM = (tAvgMin - (tH * 60))|round(0, 'floor') %}
                        {{ tH }}h {{ tM }}m (tickets)
                    {% else %}
                        -
                    {% endif %}
                </div>
            </div>
            <div class="col-md-4 text-center">
                <div class="h5 text-muted mb-1">Tareas en Progreso</div>
                {% set tasksInProgress = detail|filter(t => t.status == 'in_progress')|length %}
                {% set tasksInProgressFromTicket = detail|filter(t => t.status == 'in_progress' and t.fromTicket)|length %}
                {% set tasksInProgressAutonomous = tasksInProgress - tasksInProgressFromTicket %}
                {% set ticketsOpen = userTickets.openAssigned|default(0) %}
                <div class="h3">{{ tasksInProgress + ticketsOpen }}</div>
                <div class="small text-muted">
                    Tareas: {{ tasksInProgress }} (de Ticket: {{ tasksInProgressFromTicket }} · Autónomas: {{ tasksInProgressAutonomous }}) · Tickets abiertos: {{ ticketsOpen }}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
