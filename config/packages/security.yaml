security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User:
            algorithm: auto
            cost: 12  # Higher is more secure but slower
            time_cost: 3  # For Argon2i
            memory_cost: 65536  # For Argon2i

    role_hierarchy:
        ROLE_ADMIN: [ROLE_AUDITOR, ROLE_USER]
        ROLE_AUDITOR: ROLE_USER

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            id: App\Security\UserProvider

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                username_parameter: _username
                password_parameter: _password
                default_target_path: app_home
                post_only: true
                use_forward: false
                use_referer: false
                always_use_default_target_path: false
                target_path_parameter: _target_path
                failure_path: app_login
                failure_forward: false
                failure_path_parameter: _failure_path
            logout:
                path: app_logout
                target: app_home
                invalidate_session: true
                delete_cookies:
                    PHPSESSID: { path: null, domain: null }
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
                domain: ~
                remember_me_parameter: _remember_me

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Public access for testing and API endpoints
        - { path: ^/test, roles: PUBLIC_ACCESS }
        - { path: ^/admin/maintenance/api/calendar/events, roles: PUBLIC_ACCESS, methods: [GET] }
        
        # Login and registration
        - { path: ^/login$, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/resetting, roles: PUBLIC_ACCESS }
        
        # Public assets
        - { path: ^/_wdt, roles: PUBLIC_ACCESS }
        - { path: ^/_profiler, roles: PUBLIC_ACCESS }
        
        # Maintenance routes accessible by all authenticated users
        - { path: ^/admin/maintenance/calendar, roles: ROLE_USER }
        - { path: ^/admin/maintenance/task, roles: ROLE_USER }
        - { path: ^/admin/maintenance/tasks, roles: ROLE_USER }
        - { path: ^/admin/maintenance/task/new, roles: ROLE_USER }
        - { path: ^/admin/maintenance/tasks/new, roles: ROLE_USER }
        - { path: ^/admin/maintenance/task/create, roles: ROLE_USER, methods: [POST] }
        - { path: ^/admin/maintenance/tasks/create, roles: ROLE_USER, methods: [POST] }
        - { path: ^/admin/maintenance/task/\d+/edit, roles: ROLE_USER }
        - { path: ^/admin/maintenance/tasks/\d+/edit, roles: ROLE_USER }
        - { path: ^/admin/maintenance/task/\d+/complete, roles: ROLE_USER, methods: [POST] }
        - { path: ^/admin/maintenance/tasks/\d+/complete, roles: ROLE_USER, methods: [POST] }
        - { path: ^/admin/maintenance/task/\d+/details, roles: ROLE_USER }
        - { path: ^/admin/maintenance/tasks/\d+/details, roles: ROLE_USER }
        
        # Other maintenance routes (admin/auditor only)
        - { path: ^/admin/maintenance/categories, roles: [ROLE_ADMIN, ROLE_AUDITOR] }
        - { path: ^/admin/maintenance/reports, roles: [ROLE_ADMIN, ROLE_AUDITOR] }
        - { path: ^/admin/maintenance/settings, roles: [ROLE_ADMIN, ROLE_AUDITOR] }
        
        # Catch-all for other maintenance routes
        - { path: ^/admin/maintenance, roles: [ROLE_ADMIN, ROLE_AUDITOR] }
        - { path: ^/admin/user, roles: [ROLE_ADMIN, ROLE_AUDITOR] }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/auditor, roles: ROLE_AUDITOR }
        - { path: ^/tickets, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/tickets/\d+/approve-proposal, roles: ROLE_USER }
        - { path: ^/tickets/\d+/reject-proposal, roles: ROLE_USER }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
